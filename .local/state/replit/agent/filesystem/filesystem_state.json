{"file_contents":{"EXTERNAL_LLM_INTEGRATION.md":{"content":"# External LLM Integration with MCP Server\n\n## Two Integration Approaches\n\n### Approach 1: JWT-Bearer Flow (Recommended for Production)\n**Same as frontend J.A.R.V.I.S but different endpoint**\n\nLLM gets JAG token from Okta → Sends to MCP server → Gets access token → Queries inventory\n\n```bash\n# Step 1: LLM exchanges JAG token for MCP access token\ncurl -X POST http://localhost:5000/mcp/external/token \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d \"grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=<JAG_TOKEN>\"\n\n# Response:\n{\n  \"token_type\": \"Bearer\",\n  \"access_token\": \"abc123...\",\n  \"expires_in\": 86400\n}\n\n# Step 2: LLM uses access token to query inventory\ncurl -X POST http://localhost:5000/mcp/inventory/query \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer <ACCESS_TOKEN>\" \\\n  -d '{\"type\": \"warehouse\", \"filters\": {\"state\": \"California\"}}'\n```\n\n### Approach 2: Direct Access (For Testing/Simple Use Cases)\n**Bypass JAG tokens entirely**\n\n```bash\n# Direct inventory query with Basic Auth\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d '{\"query\": {\"type\": \"warehouse\", \"filters\": {\"state\": \"California\"}}}'\n```\n\n## Example: External LLM with JAG Token\n\n### 1. LLM Token Exchange Request\n```http\nPOST /mcp/external/token HTTP/1.1\nHost: localhost:5000\nAuthorization: Basic bWNwX2ludmVudG9yeV9zZXJ2ZXJfMDAxOm1jcF9zZXJ2ZXJfc2VjcmV0XzIwMjRfaW52ZW50b3J5X2FjY2Vzcw==\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IktFWV9JRCJ9.eyJpc3MiOiJodHRwczovL2ZjeGRlbW8ub2t0YS5jb20iLCJzdWIiOiJ1c2VyX2lkIiwiYXVkIjoiaW52ZW50b3J5X2FwcCIsImV4cCI6MTY3MzQ2NzIwMCwiaWF0IjoxNjczNDYzNjAwfQ.signature\n```\n\n### 2. MCP Server Response\n```json\n{\n  \"token_type\": \"Bearer\",\n  \"access_token\": \"a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6\",\n  \"expires_in\": 86400\n}\n```\n\n### 3. LLM Inventory Query\n```http\nPOST /mcp/inventory/query HTTP/1.1\nHost: localhost:5000\nAuthorization: Bearer a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6\nContent-Type: application/json\n\n{\n  \"type\": \"warehouse\",\n  \"filters\": {\n    \"state\": \"California\"\n  }\n}\n```\n\n## Production JAG Token Validation\n\n**Current (Demo)**: Basic JWT format validation\n**Production**: Full Okta JWKS validation\n\n```typescript\n// Enable this in production\nasync function validateJagToken(jagToken: string): Promise<any> {\n  // Get Okta JWKS and validate signature\n  const jwks = await getOktaJwks();\n  const decoded = jwt.verify(jagToken, publicKey, {\n    algorithms: ['RS256'],\n    issuer: `https://${MCP_AUTH_SERVER_CONFIG.oktaDomain}`,\n    audience: MCP_AUTH_SERVER_CONFIG.audience\n  });\n  return decoded;\n}\n```\n\n## Error Responses\n\n### Invalid Client Credentials (401)\n```json\n{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"Invalid client credentials\"\n}\n```\n\n### Invalid JAG Token (401)\n```json\n{\n  \"error\": \"invalid_grant\", \n  \"error_description\": \"JWT validation failed: Invalid signature\"\n}\n```\n\n### Missing Grant Type (400)\n```json\n{\n  \"error\": \"unsupported_grant_type\",\n  \"error_description\": \"Only jwt-bearer grant type is supported\"\n}\n```\n\n## Environment Setup\n\n```bash\nexport MCP_SERVER_CLIENT_ID=\"mcp_inventory_server_001\"\nexport MCP_SERVER_CLIENT_SECRET=\"mcp_server_secret_2024_inventory_access\"  \nexport OKTA_DOMAIN=\"fcxdemo.okta.com\"\nexport OKTA_AUTHZ_SERVER=\"https://fcxdemo.okta.com/.well-known/oauth-authorization-server\"\n```\n\n## Integration Examples\n\n### OpenAI Assistant with Function Calling\n```python\nimport requests\nimport base64\n\ndef get_mcp_access_token(jag_token):\n    credentials = base64.b64encode(\"mcp_inventory_server_001:mcp_server_secret_2024_inventory_access\".encode()).decode()\n    \n    response = requests.post(\n        \"http://localhost:5000/mcp/external/token\",\n        headers={\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Authorization\": f\"Basic {credentials}\"\n        },\n        data={\n            \"grant_type\": \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n            \"assertion\": jag_token\n        }\n    )\n    \n    return response.json()[\"access_token\"]\n\ndef query_inventory(access_token, query_type, filters=None):\n    payload = {\"type\": query_type}\n    if filters:\n        payload[\"filters\"] = filters\n    \n    response = requests.post(\n        \"http://localhost:5000/mcp/inventory/query\",\n        headers={\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {access_token}\"\n        },\n        json=payload\n    )\n    \n    return response.json()\n\n# Usage\njag_token = \"eyJ...\" # From Okta\naccess_token = get_mcp_access_token(jag_token)\ninventory = query_inventory(access_token, \"warehouse\", {\"state\": \"California\"})\n```\n\n### Anthropic Claude with Tool Use\n```python\ndef mcp_inventory_tool(jag_token, query_type, state=None):\n    \"\"\"Tool for Claude to query inventory via MCP server\"\"\"\n    \n    # Step 1: Exchange JAG for access token\n    access_token = get_mcp_access_token(jag_token)\n    \n    # Step 2: Query inventory\n    filters = {\"state\": state} if state else None\n    result = query_inventory(access_token, query_type, filters)\n    \n    return result\n```\n\n## Testing Your Integration\n\n```bash\n# Test token exchange\ncurl -v -X POST http://localhost:5000/mcp/external/token \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d \"grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2ZjeGRlbW8ub2t0YS5jb20iLCJzdWIiOiJ0ZXN0In0.test\"\n```","size_bytes":5918},"MCP_API_DOCUMENTATION.md":{"content":"# MCP Server API Documentation\n\n## Overview\nThe MCP (Model Context Protocol) Server provides secure access to Atlas Beverages inventory data through multiple authentication flows:\n\n1. **Frontend Flow**: JAG token → OAuth token → Inventory access (for J.A.R.V.I.S UI)\n2. **External LLM Flow**: Direct Basic Auth → Inventory access (for external systems)\n\n## Base URL\n```\nhttp://localhost:5000\n```\n\n## Authentication Credentials\n```\nClient ID: mcp_inventory_server_001\nClient Secret: mcp_server_secret_2024_inventory_access\n```\n\n## Endpoints\n\n### 1. External LLM Direct Access (Recommended for external systems)\n\n**Endpoint**: `POST /mcp/external/inventory`\n\n**Authentication**: Basic Auth\n```bash\nAuthorization: Basic <base64(clientId:clientSecret)>\n```\n\n**Request Body**:\n```json\n{\n  \"query\": {\n    \"type\": \"warehouse|all_inventory|low_stock\",\n    \"filters\": {\n      \"state\": \"California|Texas|Nevada\" // Required for warehouse type\n    }\n  }\n}\n```\n\n**Example cURL Commands**:\n\n```bash\n# Get California warehouse inventory\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d '{\n    \"query\": {\n      \"type\": \"warehouse\",\n      \"filters\": {\n        \"state\": \"California\"\n      }\n    }\n  }'\n\n# Get all inventory across warehouses\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d '{\n    \"query\": {\n      \"type\": \"all_inventory\"\n    }\n  }'\n\n# Get low stock items\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d '{\n    \"query\": {\n      \"type\": \"low_stock\"\n    }\n  }'\n```\n\n**Response Format**:\n```json\n{\n  \"success\": true,\n  \"queryType\": \"warehouse\",\n  \"data\": {\n    \"warehouse\": {\n      \"id\": 1,\n      \"name\": \"West Coast Distribution\",\n      \"location\": \"Los Angeles, CA\",\n      \"state\": \"California\"\n    },\n    \"items\": [\n      {\n        \"id\": 1,\n        \"name\": \"Premium Cola\",\n        \"category\": \"Soft Drinks\",\n        \"quantity\": 150,\n        \"minStockLevel\": 50,\n        \"price\": 2.99\n      }\n    ],\n    \"totalItems\": 5,\n    \"lowStockItems\": []\n  },\n  \"timestamp\": \"2025-01-26T23:15:00.000Z\",\n  \"source\": \"mcp-external-api\",\n  \"client\": \"mcp_inventory_server_001\"\n}\n```\n\n### 2. Frontend OAuth Flow (for J.A.R.V.I.S)\n\n**Token Exchange**: `POST /oauth2/token`\n```bash\ncurl -X POST http://localhost:5000/oauth2/token \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d \"grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=<JAG_TOKEN>\"\n```\n\n**Inventory Query**: `POST /mcp/inventory/query`\n```bash\ncurl -X POST http://localhost:5000/mcp/inventory/query \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer <ACCESS_TOKEN>\" \\\n  -d '{\"type\": \"all_inventory\"}'\n```\n\n### 3. Configuration & Health\n\n**Configuration**: `GET /mcp/config`\n```bash\ncurl http://localhost:5000/mcp/config\n```\n\n**Health Check**: `GET /mcp/health`\n```bash\ncurl http://localhost:5000/mcp/health\n```\n\n## Query Types\n\n### warehouse\n- **Required**: `filters.state` (California, Texas, Nevada)\n- **Returns**: Specific warehouse data with inventory items\n\n### all_inventory\n- **Required**: None\n- **Returns**: All warehouses with their inventory items\n\n### low_stock\n- **Required**: None\n- **Returns**: Items that are below minimum stock levels across all warehouses\n\n## Error Responses\n\n```json\n{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"Client authentication required\"\n}\n```\n\n```json\n{\n  \"error\": \"invalid_request\", \n  \"error_description\": \"Query object with type field is required\"\n}\n```\n\n```json\n{\n  \"error\": \"warehouse_not_found\",\n  \"message\": \"No warehouse found for state: InvalidState\"\n}\n```\n\n## Integration Examples\n\n### Python Example\n```python\nimport requests\nimport base64\nimport json\n\n# Credentials\nclient_id = \"mcp_inventory_server_001\"\nclient_secret = \"mcp_server_secret_2024_inventory_access\"\ncredentials = base64.b64encode(f\"{client_id}:{client_secret}\".encode()).decode()\n\n# Query California warehouse\nresponse = requests.post(\n    \"http://localhost:5000/mcp/external/inventory\",\n    headers={\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Basic {credentials}\"\n    },\n    json={\n        \"query\": {\n            \"type\": \"warehouse\",\n            \"filters\": {\n                \"state\": \"California\"\n            }\n        }\n    }\n)\n\ninventory_data = response.json()\nprint(json.dumps(inventory_data, indent=2))\n```\n\n### Node.js Example\n```javascript\nconst axios = require('axios');\n\nconst credentials = Buffer.from('mcp_inventory_server_001:mcp_server_secret_2024_inventory_access').toString('base64');\n\nasync function queryInventory() {\n  try {\n    const response = await axios.post(\n      'http://localhost:5000/mcp/external/inventory',\n      {\n        query: {\n          type: 'all_inventory'\n        }\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Basic ${credentials}`\n        }\n      }\n    );\n    \n    console.log(JSON.stringify(response.data, null, 2));\n  } catch (error) {\n    console.error('Error:', error.response?.data || error.message);\n  }\n}\n\nqueryInventory();\n```\n\n## Security Notes\n\n1. **Production**: Enable proper JWT validation against Okta JWKS\n2. **HTTPS**: Use HTTPS in production environments\n3. **Rate Limiting**: Implement rate limiting for external endpoints\n4. **Credentials**: Store client credentials securely (environment variables)\n5. **Logging**: Monitor access patterns and failed authentication attempts\n\n## Environment Variables\n\n```bash\nMCP_SERVER_CLIENT_ID=mcp_inventory_server_001\nMCP_SERVER_CLIENT_SECRET=mcp_server_secret_2024_inventory_access\nOKTA_DOMAIN=fcxdemo.okta.com\nOKTA_AUTHZ_SERVER=https://fcxdemo.okta.com/.well-known/oauth-authorization-server\n```","size_bytes":6251},"MCP_QUICK_TEST.md":{"content":"# MCP External API - Quick Test Commands\n\n## Your MCP Server Credentials\n```\nServer: http://localhost:5000\nClient ID: mcp_inventory_server_001\nClient Secret: mcp_server_secret_2024_inventory_access\nBase64 Encoded: $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\n```\n\n## Direct cURL Commands (Copy & Paste Ready)\n\n### 1. Test California Warehouse\n```bash\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d '{\"query\":{\"type\":\"warehouse\",\"filters\":{\"state\":\"California\"}}}'\n```\n\n### 2. Test All Inventory\n```bash\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d '{\"query\":{\"type\":\"all_inventory\"}}'\n```\n\n### 3. Test Low Stock Items\n```bash\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d '{\"query\":{\"type\":\"low_stock\"}}'\n```\n\n### 4. Test Texas Warehouse\n```bash\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d '{\"query\":{\"type\":\"warehouse\",\"filters\":{\"state\":\"Texas\"}}}'\n```\n\n### 5. Get Server Configuration\n```bash\ncurl -X GET http://localhost:5000/mcp/config\n```\n\n## Expected Response Format\n```json\n{\n  \"success\": true,\n  \"queryType\": \"warehouse\",\n  \"data\": {\n    \"warehouse\": {\n      \"id\": 1,\n      \"name\": \"West Coast Distribution\",\n      \"location\": \"Los Angeles, CA\", \n      \"state\": \"California\"\n    },\n    \"items\": [...],\n    \"totalItems\": 5,\n    \"lowStockItems\": [...]\n  },\n  \"timestamp\": \"2025-01-26T23:20:00.000Z\",\n  \"source\": \"mcp-external-api\",\n  \"client\": \"mcp_inventory_server_001\"\n}\n```\n\n## External LLM Integration Patterns\n\n### OpenAI Function Calling\n```json\n{\n  \"name\": \"query_inventory\",\n  \"description\": \"Query Atlas Beverages inventory system\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"query_type\": {\n        \"type\": \"string\",\n        \"enum\": [\"warehouse\", \"all_inventory\", \"low_stock\"],\n        \"description\": \"Type of inventory query\"\n      },\n      \"state\": {\n        \"type\": \"string\",\n        \"enum\": [\"California\", \"Texas\", \"Nevada\"],\n        \"description\": \"State filter for warehouse queries\"\n      }\n    },\n    \"required\": [\"query_type\"]\n  }\n}\n```\n\n### Anthropic Claude Tool Use\n```json\n{\n  \"name\": \"mcp_inventory_query\",\n  \"description\": \"Query inventory data from Atlas Beverages MCP server\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"query_type\": {\n        \"type\": \"string\",\n        \"enum\": [\"warehouse\", \"all_inventory\", \"low_stock\"]\n      },\n      \"filters\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"state\": {\"type\": \"string\"}\n        }\n      }\n    },\n    \"required\": [\"query_type\"]\n  }\n}\n```\n\n## Error Handling Examples\n\n### Invalid Credentials (401)\n```bash\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic invalid_credentials\" \\\n  -d '{\"query\":{\"type\":\"warehouse\",\"filters\":{\"state\":\"California\"}}}'\n```\n\n### Missing Query Type (400) \n```bash\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d '{}'\n```\n\n### Invalid State Filter (404)\n```bash\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -d '{\"query\":{\"type\":\"warehouse\",\"filters\":{\"state\":\"InvalidState\"}}}'\n```","size_bytes":4128},"README.md":{"content":"# Enterprise AI Platform with MCP Server\n\nA comprehensive demo platform featuring dual interfaces: **Atlas Beverages** (inventory management) and **J.A.R.V.I.S** (AI assistant) with enterprise-grade Multi-Control Point (MCP) server architecture.\n\n## 🚀 **Quick Start (Zero Dependencies)**\n\n```bash\n# Clone and run immediately - no database setup needed!\ngit clone <your-repo>\ncd enterprise-ai-platform\nnpm install\nnpm run dev\n```\n\n**That's it!** The app runs on http://localhost:5000 with:\n- ✅ Pre-populated demo inventory across 3 warehouses\n- ✅ Okta authentication ready\n- ✅ MCP server with JWT-bearer token exchange\n- ✅ External LLM integration endpoints\n\n## 🏗️ **Architecture Overview**\n\n### **Dual Interface System**\n- **Atlas Beverages**: Inventory management interface\n- **J.A.R.V.I.S**: AI assistant with inventory access via JAG tokens\n\n### **In-Memory Storage (Demo Ready)**\n- No database dependencies\n- Realistic demo data pre-loaded\n- Session-based persistence\n- Perfect for GitHub/Vercel deployment\n\n### **MCP Authorization Server**\n- OAuth 2.0 JWT-bearer grant type\n- JAG token validation against Okta\n- Cross-application token exchange\n- External LLM integration support\n\n## 📊 **Demo Data**\n\nThe platform starts with realistic inventory across 3 warehouses:\n\n### **California Warehouse** (Los Angeles)\n- Premium Cola Classic (150 units)\n- Craft IPA Selection (45 units) \n- Energy Boost Original (200 units)\n- Sparkling Water Lemon (30 units - LOW STOCK)\n- Organic Green Tea (80 units)\n\n### **Texas Warehouse** (Austin)\n- Sweet Tea Southern Style (120 units)\n- Local Root Beer (85 units)\n- Sports Hydration Blue (180 units)\n- BBQ Cola Limited (25 units - LOW STOCK)\n\n### **Nevada Warehouse** (Las Vegas)\n- Desert Spring Water (300 units)\n- Premium Mixer Tonic (75 units)\n- Luxury Vodka Selection (40 units)\n- Casino Energy Rush (15 units - LOW STOCK)\n\n## 🔐 **Authentication Flows**\n\n### **Frontend (J.A.R.V.I.S & Atlas)**\n1. User authenticates via Okta OIDC\n2. Receives JAG (JSON Authorization Grant) token\n3. JAG token exchanged for MCP access token\n4. Access inventory via MCP server\n\n### **External LLM Integration**\n```bash\n# Step 1: Exchange JAG for MCP access token\ncurl -X POST http://localhost:5000/mcp/external/token \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=<JAG_TOKEN>\"\n\n# Step 2: Query inventory with access token\ncurl -X POST http://localhost:5000/mcp/inventory/query \\\n  -H \"Authorization: Bearer <ACCESS_TOKEN>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"type\": \"warehouse\", \"filters\": {\"state\": \"California\"}}'\n```\n\n## 🛠️ **Tech Stack**\n\n### **Frontend**\n- React 18 + TypeScript\n- Radix UI + shadcn/ui + Tailwind CSS\n- TanStack Query for state management\n- Wouter for routing\n\n### **Backend** \n- Express.js + TypeScript\n- In-memory storage (no database needed)\n- Okta OAuth 2.0 integration\n- MCP server with JWT validation\n\n### **Development**\n- Vite for fast builds\n- ESLint + TypeScript for code quality\n- Hot reload for development\n\n## 🌐 **API Endpoints**\n\n### **Authentication**\n- `POST /api/auth/callback` - OAuth callback handler\n- `POST /api/auth/token-exchange` - JAG to access token exchange\n- `GET /api/auth/sessions` - User session management\n- `POST /api/auth/logout` - Session termination\n\n### **Inventory Management**\n- `GET /api/warehouses` - List all warehouses\n- `GET /api/inventory/:warehouseId` - Get warehouse inventory\n- `POST /api/inventory` - Create inventory item\n- `PUT /api/inventory/:id` - Update inventory item\n- `DELETE /api/inventory/:id` - Delete inventory item\n\n### **MCP Server**\n- `POST /oauth2/token` - OAuth token endpoint (frontend)\n- `POST /mcp/external/token` - OAuth token endpoint (external LLMs)\n- `POST /mcp/inventory/query` - Query inventory with access token\n- `POST /mcp/external/inventory` - Direct inventory access (Basic auth)\n- `GET /mcp/health` - Server status and configuration\n\n## 🔧 **Environment Setup**\n\nCreate `.env` file for production use:\n\n```bash\n# Okta Configuration\nOKTA_DOMAIN=your-okta-domain.okta.com\nOKTA_AUTHORIZATION_SERVER=https://your-okta-domain.okta.com/.well-known/oauth-authorization-server\n\n# Client Credentials (or use demo defaults)\nINVENTORY_CLIENT_ID=your_inventory_client_id\nINVENTORY_CLIENT_SECRET=your_inventory_client_secret\nJARVIS_CLIENT_ID=your_jarvis_client_id  \nJARVIS_CLIENT_SECRET=your_jarvis_client_secret\n\n# MCP Server Credentials (or use demo defaults)\nMCP_SERVER_CLIENT_ID=mcp_inventory_server_001\nMCP_SERVER_CLIENT_SECRET=mcp_server_secret_2024_inventory_access\n```\n\n**Note**: Demo works without environment setup using fallback credentials.\n\n## 📋 **Deployment**\n\n### **Vercel (Recommended)**\n```bash\n# Deploy directly to Vercel\nnpm install -g vercel\nvercel\n\n# Or connect your GitHub repo to Vercel dashboard\n```\n\n### **Docker**\n```bash\n# Build and run with Docker\ndocker build -t enterprise-ai-platform .\ndocker run -p 5000:5000 enterprise-ai-platform\n```\n\n### **Manual Deployment**\n```bash\n# Build for production\nnpm run build\n\n# Start production server\nnpm start\n```\n\n## 🧪 **Testing the Integration**\n\n### **Test MCP Health**\n```bash\ncurl http://localhost:5000/mcp/health | jq .\n```\n\n### **Test Direct Inventory Access**\n```bash\ncurl -X POST http://localhost:5000/mcp/external/inventory \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"query\": {\"type\": \"warehouse\", \"filters\": {\"state\": \"California\"}}}'\n```\n\n### **Test Token Exchange Flow**\n```bash\n# Use demo JAG token\ncurl -X POST http://localhost:5000/mcp/external/token \\\n  -H \"Authorization: Basic $(echo -n 'mcp_inventory_server_001:mcp_server_secret_2024_inventory_access' | base64)\" \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL2ZjeGRlbW8ub2t0YS5jb20iLCJzdWIiOiJ0ZXN0In0.test\"\n```\n\n## 📚 **Documentation**\n\n- [`EXTERNAL_LLM_INTEGRATION.md`](./EXTERNAL_LLM_INTEGRATION.md) - External LLM integration guide\n- [`MCP_API_DOCUMENTATION.md`](./MCP_API_DOCUMENTATION.md) - Complete MCP API reference\n- [`MCP_QUICK_TEST.md`](./MCP_QUICK_TEST.md) - Quick testing guide\n\n## 🤝 **Contributing**\n\nThis is a demo application showcasing enterprise-grade patterns:\n\n1. Fork the repository\n2. Create your feature branch\n3. Make your changes (data persists during session)\n4. Test with the MCP endpoints\n5. Submit a pull request\n\n## 📝 **License**\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n---\n\n**Perfect for demos, POCs, and showcasing enterprise AI integration patterns without complex database setup.**","size_bytes":6934},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is an Enterprise AI Platform featuring two main interfaces: Atlas Beverages (inventory management) and J.A.R.V.I.S (AI assistant). The platform is a single application with dual interfaces using a shared authentication system with Okta, enabling secure cross-interface access. Users can manage warehouse inventory through Atlas and interact with an AI assistant through J.A.R.V.I.S that can access inventory data via JAG token authorization.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React SPA**: Single-page application using React 18 with TypeScript\n- **UI Framework**: Radix UI components with shadcn/ui design system and Tailwind CSS\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Express.js Server**: RESTful API server with TypeScript\n- **Storage Layer**: In-memory storage with realistic demo data (no database dependencies)\n- **Authentication**: Okta OAuth 2.0 with PKCE flow and token exchange for cross-application access\n- **Session Management**: In-memory sessions with automatic cleanup\n- **API Design**: RESTful endpoints with proper HTTP status codes and error handling\n\n## Data Storage Solutions\n- **In-Memory Storage**: Session-based data persistence for demo purposes\n- **Demo Data**: Pre-populated with 3 warehouses and 13 inventory items\n- **Key Data Types**:\n  - Users (with Okta integration)\n  - Warehouses and inventory items\n  - Authentication sessions\n  - Token exchange audit logs\n- **Reset Behavior**: Data resets to defaults on server restart (perfect for demos)\n\n## Authentication and Authorization\n- **OAuth Provider**: Okta with separate client applications for inventory and jarvis\n- **Token Types**: ID tokens for authentication, access tokens for API calls\n- **Session Strategy**: Server-side sessions stored in database with expiration\n- **Cross-Interface Access**: OAuth token exchange (RFC 8693) enables J.A.R.V.I.S to access inventory data using JAG tokens\n- **Security**: PKCE flow, session validation middleware, token expiration checks\n\n## External Dependencies\n- **Okta**: Identity provider and OAuth authorization server (configurable via environment)\n- **Google Fonts**: Typography assets\n- **Replit**: Development environment integration\n\n## Demo-Ready Features\n- **Zero Database Setup**: Works immediately without external dependencies\n- **GitHub/Vercel Friendly**: No infrastructure requirements for deployment\n- **Realistic Demo Data**: 3 warehouses with beverage inventory across California, Texas, and Nevada\n- **Session Persistence**: Data persists during app session, resets to defaults on restart\n\nThe architecture supports a secure dual-interface environment where users authenticate once and can access both interfaces, with J.A.R.V.I.S able to securely query inventory data through JAG token authorization within the same application. Perfect for demos, POCs, and showcasing enterprise AI integration patterns.","size_bytes":3170},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        atlas: {\n          primary: \"var(--atlas-primary)\",\n          secondary: \"var(--atlas-secondary)\",\n          accent: \"var(--atlas-accent)\",\n          light: \"var(--atlas-light)\",\n          gray: \"var(--atlas-gray)\",\n        },\n        jarvis: {\n          gold: \"var(--jarvis-gold)\",\n          goldLight: \"var(--jarvis-gold-light)\",\n          blue: \"var(--jarvis-blue)\",\n          blueLight: \"var(--jarvis-blue-light)\",\n          dark: \"var(--jarvis-dark)\",\n          darkLight: \"var(--jarvis-dark-light)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          '0%': { opacity: '0', transform: 'translateY(10px)' },\n          '100%': { opacity: '1', transform: 'translateY(0)' }\n        },\n        slideUp: {\n          '0%': { transform: 'translateY(20px)', opacity: '0' },\n          '100%': { transform: 'translateY(0)', opacity: '1' }\n        },\n        'spin-slow': {\n          '0%': { transform: 'rotate(0deg)' },\n          '100%': { transform: 'rotate(360deg)' }\n        },\n        'pulse-glow': {\n          '0%, 100%': { opacity: '1' },\n          '50%': { opacity: '0.5' }\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        'fade-in': 'fadeIn 0.5s ease-in-out',\n        'slide-up': 'slideUp 0.3s ease-out',\n        'spin-slow': 'spin-slow 3s linear infinite',\n        'pulse-glow': 'pulse-glow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4068},"test_mcp_external.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nTest script for MCP External LLM API\nThis demonstrates how external LLM systems can directly access inventory data\n\"\"\"\n\nimport requests\nimport base64\nimport json\nimport sys\n\n# MCP Server Configuration\nMCP_BASE_URL = \"http://localhost:5000\"\nCLIENT_ID = \"mcp_inventory_server_001\"\nCLIENT_SECRET = \"mcp_server_secret_2024_inventory_access\"\n\ndef create_basic_auth():\n    \"\"\"Create Basic auth header for MCP client credentials\"\"\"\n    credentials = f\"{CLIENT_ID}:{CLIENT_SECRET}\"\n    encoded_credentials = base64.b64encode(credentials.encode()).decode()\n    return f\"Basic {encoded_credentials}\"\n\ndef query_inventory(query_type, filters=None):\n    \"\"\"Query inventory through MCP external endpoint\"\"\"\n    url = f\"{MCP_BASE_URL}/mcp/external/inventory\"\n    \n    payload = {\n        \"query\": {\n            \"type\": query_type\n        }\n    }\n    \n    if filters:\n        payload[\"query\"][\"filters\"] = filters\n    \n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": create_basic_auth()\n    }\n    \n    try:\n        response = requests.post(url, headers=headers, json=payload)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error querying inventory: {e}\")\n        if hasattr(e, 'response') and e.response:\n            print(f\"Response: {e.response.text}\")\n        return None\n\ndef main():\n    print(\"🤖 MCP External LLM API Test\")\n    print(\"=\" * 50)\n    \n    # Test 1: Get California warehouse inventory\n    print(\"\\n1. Testing California warehouse query...\")\n    california_data = query_inventory(\"warehouse\", {\"state\": \"California\"})\n    if california_data:\n        print(\"✅ California warehouse query successful\")\n        warehouse = california_data[\"data\"][\"warehouse\"]\n        print(f\"   Warehouse: {warehouse['name']} ({warehouse['location']})\")\n        print(f\"   Total Items: {california_data['data']['totalItems']}\")\n        print(f\"   Low Stock Items: {len(california_data['data']['lowStockItems'])}\")\n    else:\n        print(\"❌ California warehouse query failed\")\n    \n    # Test 2: Get all inventory\n    print(\"\\n2. Testing all inventory query...\")\n    all_inventory = query_inventory(\"all_inventory\")\n    if all_inventory:\n        print(\"✅ All inventory query successful\")\n        warehouses = all_inventory[\"data\"]\n        print(f\"   Total Warehouses: {len(warehouses)}\")\n        for warehouse_data in warehouses:\n            warehouse = warehouse_data[\"warehouse\"]\n            print(f\"   - {warehouse['name']} ({warehouse['state']}): {warehouse_data['totalItems']} items\")\n    else:\n        print(\"❌ All inventory query failed\")\n    \n    # Test 3: Get low stock items\n    print(\"\\n3. Testing low stock query...\")\n    low_stock = query_inventory(\"low_stock\")\n    if low_stock:\n        print(\"✅ Low stock query successful\")\n        low_stock_warehouses = low_stock[\"data\"]\n        if low_stock_warehouses:\n            print(f\"   Warehouses with low stock: {len(low_stock_warehouses)}\")\n            for warehouse_data in low_stock_warehouses:\n                print(f\"   - {warehouse_data['warehouse']}: {len(warehouse_data['lowStockItems'])} low stock items\")\n        else:\n            print(\"   No low stock items found\")\n    else:\n        print(\"❌ Low stock query failed\")\n    \n    # Test 4: Configuration endpoint\n    print(\"\\n4. Testing configuration endpoint...\")\n    try:\n        config_response = requests.get(f\"{MCP_BASE_URL}/mcp/config\")\n        config_response.raise_for_status()\n        config = config_response.json()\n        print(\"✅ Configuration query successful\")\n        print(f\"   Server: {config['serverName']}\")\n        print(f\"   External Endpoint: {config['endpoints']['externalInventory']}\")\n        print(f\"   Supported Queries: {', '.join(config['supportedQueries'])}\")\n    except requests.exceptions.RequestException as e:\n        print(f\"❌ Configuration query failed: {e}\")\n\nif __name__ == \"__main__\":\n    main()","size_bytes":4008},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Mount MCP server routes\n  const { mcpServer } = await import(\"./mcp-server\");\n  app.use(mcpServer);\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2174},"server/mcp-server.ts":{"content":"import express from 'express';\nimport { storage } from './storage';\nimport crypto from 'crypto';\nimport jwt from 'jsonwebtoken';\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// MCP Authorization Server Configuration\nconst MCP_AUTH_SERVER_CONFIG = {\n  // MCP Server OAuth Client Credentials\n  clientId: process.env.MCP_SERVER_CLIENT_ID || 'mcp_inventory_server_001',\n  clientSecret: process.env.MCP_SERVER_CLIENT_SECRET || 'mcp_server_secret_2024_inventory_access',\n  \n  // Okta Configuration for JWT Validation\n  oktaDomain: process.env.OKTA_DOMAIN || 'fcxdemo.okta.com',\n  oktaAuthzServer: process.env.OKTA_AUTHZ_SERVER || 'https://fcxdemo.okta.com/.well-known/oauth-authorization-server',\n  \n  // MCP Server Details\n  audience: 'http://localhost:5001/inventory',\n  issuer: 'https://inventory-mcp-authserver',\n  tokenLifetime: 86400 // 24 hours\n};\n\n// In-memory cache for Okta JWKS (in production, use Redis or similar)\nlet oktaJwksCache: any = null;\nlet jwksCacheExpiry: number = 0;\n\ninterface MCPJwtBearerRequest {\n  grant_type: string;\n  assertion: string;\n}\n\ninterface OktaJwksResponse {\n  keys: Array<{\n    kty: string;\n    use: string;\n    kid: string;\n    x5t: string;\n    n: string;\n    e: string;\n    x5c: string[];\n  }>;\n}\n\ninterface InventoryQuery {\n  type: 'warehouse' | 'all_inventory' | 'low_stock';\n  filters?: {\n    state?: string;\n    warehouseName?: string;\n    category?: string;\n  };\n}\n\n// Helper function to get Okta JWKS for JWT validation\nasync function getOktaJwks(): Promise<OktaJwksResponse> {\n  const now = Date.now();\n  \n  // Return cached JWKS if still valid (cache for 1 hour)\n  if (oktaJwksCache && now < jwksCacheExpiry) {\n    return oktaJwksCache;\n  }\n  \n  try {\n    const jwksUrl = `https://${MCP_AUTH_SERVER_CONFIG.oktaDomain}/oauth2/v1/keys`;\n    const response = await fetch(jwksUrl);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch JWKS: ${response.statusText}`);\n    }\n    \n    oktaJwksCache = await response.json();\n    jwksCacheExpiry = now + (60 * 60 * 1000); // Cache for 1 hour\n    \n    return oktaJwksCache;\n  } catch (error) {\n    console.error('Error fetching Okta JWKS:', error);\n    throw new Error('Unable to validate JWT - JWKS fetch failed');\n  }\n}\n\n// Helper function to validate JAG JWT token\nasync function validateJagToken(jagToken: string): Promise<any> {\n  try {\n    // Decode JWT header to get kid (key ID)\n    const decodedHeader = jwt.decode(jagToken, { complete: true });\n    if (!decodedHeader || typeof decodedHeader === 'string') {\n      throw new Error('Invalid JWT format');\n    }\n    \n    const { kid } = decodedHeader.header;\n    \n    // Get Okta JWKS\n    const jwks = await getOktaJwks();\n    const signingKey = jwks.keys.find(key => key.kid === kid);\n    \n    if (!signingKey) {\n      throw new Error(`No matching key found for kid: ${kid}`);\n    }\n    \n    // Construct public key from JWKS\n    const publicKey = `-----BEGIN CERTIFICATE-----\\n${signingKey.x5c[0]}\\n-----END CERTIFICATE-----`;\n    \n    // Verify and decode JWT\n    const decoded = jwt.verify(jagToken, publicKey, {\n      algorithms: ['RS256'],\n      issuer: `https://${MCP_AUTH_SERVER_CONFIG.oktaDomain}`,\n      clockTolerance: 60 // Allow 60 seconds clock skew\n    });\n    \n    return decoded;\n  } catch (error) {\n    console.error('JAG token validation failed:', error);\n    throw new Error(`JWT validation failed: ${error.message}`);\n  }\n}\n\n// MCP Authorization Server OAuth Token Endpoint - JWT Bearer Flow\napp.post('/oauth2/token', async (req, res) => {\n  try {\n    // Parse Authorization header for Basic authentication\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Basic ')) {\n      return res.status(401).json({\n        error: 'invalid_client',\n        error_description: 'Client authentication required'\n      });\n    }\n\n    // Decode Basic auth credentials\n    const base64Credentials = authHeader.replace('Basic ', '');\n    const credentials = Buffer.from(base64Credentials, 'base64').toString('ascii');\n    const [clientId, clientSecret] = credentials.split(':');\n\n    // Validate MCP client credentials\n    if (clientId !== MCP_AUTH_SERVER_CONFIG.clientId || clientSecret !== MCP_AUTH_SERVER_CONFIG.clientSecret) {\n      return res.status(401).json({\n        error: 'invalid_client',\n        error_description: 'Invalid client credentials'\n      });\n    }\n\n    const { grant_type, assertion }: MCPJwtBearerRequest = req.body;\n\n    // Validate grant type\n    if (grant_type !== 'urn:ietf:params:oauth:grant-type:jwt-bearer') {\n      return res.status(400).json({\n        error: 'unsupported_grant_type',\n        error_description: 'Only jwt-bearer grant type is supported'\n      });\n    }\n\n    if (!assertion) {\n      return res.status(400).json({\n        error: 'invalid_request',\n        error_description: 'assertion parameter is required'\n      });\n    }\n\n    console.log('=== MCP Authorization Server ===');\n    console.log(`Auth Header: ${authHeader}`);\n    console.log(`Decoded Credentials: ${credentials}`);\n    console.log(`Client: ${clientId}`);\n    console.log(`Grant Type: ${grant_type}`);\n    console.log(`Request Body:`, req.body);\n    console.log(`JAG Token (assertion): ${assertion ? assertion.substring(0, 50) + '...' : 'undefined'}`);\n\n    // For demo purposes, skip JWT validation and use basic validation\n    // In production, this would validate against Okta JWKS\n    let validatedClaims;\n    try {\n      // Basic JWT format validation\n      const parts = assertion.split('.');\n      if (parts.length !== 3) {\n        throw new Error('Invalid JWT format - must have 3 parts');\n      }\n      \n      // For demo, decode without verification (UNSAFE for production)\n      const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());\n      validatedClaims = payload;\n      \n      console.log(`Token accepted for demo purposes`);\n      console.log(`Token subject: ${validatedClaims.sub || 'unknown'}`);\n      console.log(`Token issuer: ${validatedClaims.iss || 'unknown'}`);\n    } catch (error) {\n      console.error('JWT validation error:', error);\n      return res.status(401).json({\n        error: 'invalid_grant',\n        error_description: `JWT validation failed: ${error.message}`\n      });\n    }\n\n    // Generate MCP access token\n    const accessToken = crypto.randomBytes(32).toString('hex');\n    \n    console.log(`Generated MCP access token: ${accessToken.substring(0, 20)}...`);\n    console.log('=================================');\n\n    // Set cache control headers as per OAuth spec\n    res.set({\n      'Cache-Control': 'no-store',\n      'Pragma': 'no-cache'\n    });\n\n    res.json({\n      token_type: 'Bearer',\n      access_token: accessToken,\n      expires_in: MCP_AUTH_SERVER_CONFIG.tokenLifetime\n    });\n\n  } catch (error) {\n    console.error('MCP OAuth token error:', error);\n    res.status(500).json({\n      error: 'server_error',\n      error_description: 'Internal server error during token issuance'\n    });\n  }\n});\n\n// MCP Inventory Query Endpoint - Requires MCP Application Token\napp.post('/mcp/inventory/query', async (req, res) => {\n  try {\n    const authHeader = req.headers.authorization;\n    const mcpToken = authHeader?.replace('Bearer ', '');\n    \n    if (!mcpToken || mcpToken.length < 10) {\n      return res.status(401).json({ \n        error: 'unauthorized',\n        message: 'Valid MCP application token required' \n      });\n    }\n\n    const query: InventoryQuery = req.body;\n    \n    console.log('=== MCP Inventory Query ===');\n    console.log(`MCP Token: ${mcpToken.substring(0, 25)}...`);\n    console.log(`Query Type: ${query.type}`);\n    console.log(`Filters:`, query.filters);\n    console.log('===========================');\n\n    let responseData;\n\n    switch (query.type) {\n      case 'warehouse':\n        if (query.filters?.state) {\n          const warehouses = await storage.getWarehouses();\n          const warehouse = warehouses.find(w => w.state === query.filters?.state);\n          \n          if (warehouse) {\n            const items = await storage.getInventoryByWarehouse(warehouse.id);\n            responseData = {\n              warehouse,\n              items,\n              totalItems: items.length,\n              lowStockItems: items.filter(item => item.quantity <= (item.minStockLevel || 0)),\n            };\n          } else {\n            return res.status(404).json({ \n              error: 'warehouse_not_found',\n              message: `No warehouse found for state: ${query.filters.state}` \n            });\n          }\n        } else {\n          return res.status(400).json({ \n            error: 'missing_filter',\n            message: 'State filter required for warehouse query' \n          });\n        }\n        break;\n\n      case 'all_inventory':\n        const warehouses = await storage.getWarehouses();\n        responseData = await Promise.all(\n          warehouses.map(async (warehouse) => {\n            const items = await storage.getInventoryByWarehouse(warehouse.id);\n            return {\n              warehouse,\n              items,\n              totalItems: items.length,\n              lowStockItems: items.filter(item => item.quantity <= (item.minStockLevel || 0)),\n            };\n          })\n        );\n        break;\n\n      case 'low_stock':\n        const allWarehouses = await storage.getWarehouses();\n        const lowStockData = await Promise.all(\n          allWarehouses.map(async (warehouse) => {\n            const items = await storage.getInventoryByWarehouse(warehouse.id);\n            const lowStockItems = items.filter(item => item.quantity <= (item.minStockLevel || 0));\n            return {\n              warehouse: warehouse.name,\n              lowStockItems: lowStockItems.map(item => ({\n                ...item,\n                warehouseName: warehouse.name\n              }))\n            };\n          })\n        );\n        responseData = lowStockData.filter(w => w.lowStockItems.length > 0);\n        break;\n\n      default:\n        return res.status(400).json({ \n          error: 'invalid_query_type',\n          message: 'Supported query types: warehouse, all_inventory, low_stock' \n        });\n    }\n\n    res.json({\n      success: true,\n      queryType: query.type,\n      data: responseData,\n      timestamp: new Date().toISOString(),\n      source: 'mcp-inventory-server'\n    });\n\n  } catch (error) {\n    console.error('MCP inventory query error:', error);\n    res.status(500).json({ \n      error: 'query_failed',\n      message: 'Internal server error during inventory query' \n    });\n  }\n});\n\n// MCP Server Health Check\napp.get('/mcp/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    service: 'mcp-inventory-server',\n    version: '1.0.0',\n    timestamp: new Date().toISOString(),\n    capabilities: ['token_exchange', 'inventory_query', 'warehouse_lookup']\n  });\n});\n\n// External LLM OAuth Token Endpoint - Same as frontend but with better docs\napp.post('/mcp/external/token', async (req, res) => {\n  try {\n    // Parse Authorization header for Basic authentication\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Basic ')) {\n      return res.status(401).json({\n        error: 'invalid_client',\n        error_description: 'Client authentication required - use Basic auth with clientId:clientSecret'\n      });\n    }\n\n    // Decode Basic auth credentials\n    const base64Credentials = authHeader.replace('Basic ', '');\n    const credentials = Buffer.from(base64Credentials, 'base64').toString('ascii');\n    const [clientId, clientSecret] = credentials.split(':');\n\n    // Validate MCP client credentials\n    if (clientId !== MCP_AUTH_SERVER_CONFIG.clientId || clientSecret !== MCP_AUTH_SERVER_CONFIG.clientSecret) {\n      return res.status(401).json({\n        error: 'invalid_client',\n        error_description: 'Invalid client credentials'\n      });\n    }\n\n    const { grant_type, assertion }: MCPJwtBearerRequest = req.body;\n\n    // Validate grant type\n    if (grant_type !== 'urn:ietf:params:oauth:grant-type:jwt-bearer') {\n      return res.status(400).json({\n        error: 'unsupported_grant_type',\n        error_description: 'Only jwt-bearer grant type is supported'\n      });\n    }\n\n    if (!assertion) {\n      return res.status(400).json({\n        error: 'invalid_request',\n        error_description: 'assertion parameter is required'\n      });\n    }\n\n    console.log('=== MCP External LLM Token Exchange ===');\n    console.log(`Client: ${clientId}`);\n    console.log(`Grant Type: ${grant_type}`);\n    console.log(`JAG Token (assertion): ${assertion.substring(0, 50)}...`);\n\n    // For demo purposes, skip JWT validation and use basic validation\n    // In production, this would validate against Okta JWKS\n    let validatedClaims;\n    try {\n      // Basic JWT format validation\n      const parts = assertion.split('.');\n      if (parts.length !== 3) {\n        throw new Error('Invalid JWT format - must have 3 parts');\n      }\n      \n      // For demo, decode without verification (UNSAFE for production)\n      const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());\n      validatedClaims = payload;\n      \n      console.log(`Token accepted for demo purposes`);\n      console.log(`Token subject: ${validatedClaims.sub || 'unknown'}`);\n      console.log(`Token issuer: ${validatedClaims.iss || 'unknown'}`);\n    } catch (error) {\n      console.error('JWT validation error:', error);\n      return res.status(401).json({\n        error: 'invalid_grant',\n        error_description: `JWT validation failed: ${error.message}`\n      });\n    }\n\n    // Generate MCP access token\n    const accessToken = crypto.randomBytes(32).toString('hex');\n    \n    console.log(`Generated MCP access token: ${accessToken.substring(0, 20)}...`);\n    console.log('========================================');\n\n    // Set cache control headers as per OAuth spec\n    res.set({\n      'Cache-Control': 'no-store',\n      'Pragma': 'no-cache'\n    });\n\n    res.json({\n      token_type: 'Bearer',\n      access_token: accessToken,\n      expires_in: MCP_AUTH_SERVER_CONFIG.tokenLifetime\n    });\n\n  } catch (error) {\n    console.error('MCP external token error:', error);\n    res.status(500).json({\n      error: 'server_error',\n      error_description: 'Internal server error during token issuance'\n    });\n  }\n});\n\n// External LLM Direct Access Endpoint - For simple queries without token exchange\napp.post('/mcp/external/inventory', async (req, res) => {\n  try {\n    // Parse Authorization header for Basic authentication\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Basic ')) {\n      return res.status(401).json({\n        error: 'invalid_client',\n        error_description: 'Client authentication required - use Basic auth with clientId:clientSecret'\n      });\n    }\n\n    // Decode Basic auth credentials\n    const base64Credentials = authHeader.replace('Basic ', '');\n    const credentials = Buffer.from(base64Credentials, 'base64').toString('ascii');\n    const [clientId, clientSecret] = credentials.split(':');\n\n    // Validate MCP client credentials\n    if (clientId !== MCP_AUTH_SERVER_CONFIG.clientId || clientSecret !== MCP_AUTH_SERVER_CONFIG.clientSecret) {\n      return res.status(401).json({\n        error: 'invalid_client',\n        error_description: 'Invalid client credentials'\n      });\n    }\n\n    const { query } = req.body;\n    \n    if (!query || !query.type) {\n      return res.status(400).json({\n        error: 'invalid_request',\n        error_description: 'Query object with type field is required'\n      });\n    }\n\n    console.log('=== MCP External LLM Access ===');\n    console.log(`Client: ${clientId}`);\n    console.log(`Query Type: ${query.type}`);\n    console.log(`Query Filters:`, query.filters);\n    console.log('===============================');\n\n    let responseData;\n\n    switch (query.type) {\n      case 'warehouse':\n        if (query.filters?.state) {\n          const warehouses = await storage.getWarehouses();\n          const warehouse = warehouses.find(w => w.state === query.filters?.state);\n          \n          if (warehouse) {\n            const items = await storage.getInventoryByWarehouse(warehouse.id);\n            responseData = {\n              warehouse,\n              items,\n              totalItems: items.length,\n              lowStockItems: items.filter(item => item.quantity <= (item.minStockLevel || 0)),\n            };\n          } else {\n            return res.status(404).json({ \n              error: 'warehouse_not_found',\n              message: `No warehouse found for state: ${query.filters.state}` \n            });\n          }\n        } else {\n          return res.status(400).json({ \n            error: 'missing_filter',\n            message: 'State filter required for warehouse query' \n          });\n        }\n        break;\n\n      case 'all_inventory':\n        const warehouses = await storage.getWarehouses();\n        responseData = await Promise.all(\n          warehouses.map(async (warehouse) => {\n            const items = await storage.getInventoryByWarehouse(warehouse.id);\n            return {\n              warehouse,\n              items,\n              totalItems: items.length,\n              lowStockItems: items.filter(item => item.quantity <= (item.minStockLevel || 0)),\n            };\n          })\n        );\n        break;\n\n      case 'low_stock':\n        const allWarehouses = await storage.getWarehouses();\n        const lowStockData = await Promise.all(\n          allWarehouses.map(async (warehouse) => {\n            const items = await storage.getInventoryByWarehouse(warehouse.id);\n            const lowStockItems = items.filter(item => item.quantity <= (item.minStockLevel || 0));\n            return {\n              warehouse: warehouse.name,\n              lowStockItems: lowStockItems.map(item => ({\n                ...item,\n                warehouseName: warehouse.name\n              }))\n            };\n          })\n        );\n        responseData = lowStockData.filter(w => w.lowStockItems.length > 0);\n        break;\n\n      default:\n        return res.status(400).json({ \n          error: 'invalid_query_type',\n          message: 'Supported query types: warehouse, all_inventory, low_stock' \n        });\n    }\n\n    res.json({\n      success: true,\n      queryType: query.type,\n      data: responseData,\n      timestamp: new Date().toISOString(),\n      source: 'mcp-external-api',\n      client: clientId\n    });\n\n  } catch (error) {\n    console.error('MCP external inventory query error:', error);\n    res.status(500).json({ \n      error: 'query_failed',\n      message: 'Internal server error during inventory query' \n    });\n  }\n});\n\n// MCP Configuration Endpoint (for client discovery)\napp.get('/mcp/config', (req, res) => {\n  res.json({\n    serverName: 'MCP Inventory Authorization Server',\n    audience: MCP_AUTH_SERVER_CONFIG.audience,\n    issuer: MCP_AUTH_SERVER_CONFIG.issuer,\n    endpoints: {\n      // OAuth flow for J.A.R.V.I.S (frontend)\n      authorization: '/oauth2/token',\n      inventoryQuery: '/mcp/inventory/query',\n      \n      // External LLM endpoints\n      externalTokenExchange: '/mcp/external/token',  // Same JWT-bearer flow for LLMs\n      externalInventory: '/mcp/external/inventory',   // Direct access for simple queries\n      health: '/mcp/health'\n    },\n    supportedGrantTypes: ['urn:ietf:params:oauth:grant-type:jwt-bearer'],\n    supportedQueries: ['warehouse', 'all_inventory', 'low_stock'],\n    tokenType: 'Bearer',\n    authFlow: {\n      frontend: 'JAG JWT → /oauth2/token → MCP access token → /mcp/inventory/query',\n      externalLLM: 'JAG JWT → /mcp/external/token → MCP access token → /mcp/inventory/query',\n      externalDirect: 'Basic auth → /mcp/external/inventory (no token exchange needed)'\n    },\n    oktaIntegration: {\n      domain: MCP_AUTH_SERVER_CONFIG.oktaDomain,\n      jwksEndpoint: `https://${MCP_AUTH_SERVER_CONFIG.oktaDomain}/oauth2/v1/keys`\n    },\n    externalAccess: {\n      tokenExchange: {\n        endpoint: '/mcp/external/token',\n        authentication: 'Basic Auth + JWT-bearer',\n        flow: 'POST with Basic auth header + grant_type=jwt-bearer + assertion=JAG_TOKEN',\n        note: 'Same as frontend but different endpoint - validates JAG token against Okta'\n      },\n      directInventory: {\n        endpoint: '/mcp/external/inventory',\n        authentication: 'Basic Auth only',\n        credentials: 'clientId:clientSecret',\n        note: 'Direct access for simple queries without JAG token requirement'\n      }\n    }\n  });\n});\n\nexport { app as mcpServer, MCP_CLIENT_CONFIG };","size_bytes":20617},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { oktaService } from \"./services/okta\";\nimport { authenticateToken, requireInventoryAccess, requireJarvisAccess, type AuthenticatedRequest } from \"./services/auth\";\nimport { insertUserSchema, insertInventoryItemSchema, insertWarehouseSchema } from \"@shared/types\";\nimport { z } from \"zod\";\nimport { randomUUID } from \"crypto\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Memory storage automatically initializes with default data\n\n  // Auth routes\n  app.post(\"/api/auth/callback\", async (req, res) => {\n    try {\n      const { code, state, application, redirectUri, codeVerifier } = req.body;\n      \n      if (!code || !state || !application || !redirectUri || !codeVerifier) {\n        return res.status(400).json({ error: \"Code, state, application, redirectUri, and codeVerifier are required\" });\n      }\n\n      // Get the appropriate client configuration\n      const clientConfig = application === 'inventory' \n        ? oktaService.getInventoryClientConfig() \n        : oktaService.getJarvisClientConfig();\n\n      // Exchange authorization code for tokens (server-side)\n      const tokenResponse = await fetch(`https://${clientConfig.domain}/oauth2/v1/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          grant_type: 'authorization_code',\n          client_id: clientConfig.clientId,\n          client_secret: application === 'inventory' \n            ? process.env.INVENTORY_CLIENT_SECRET || \"Ixvrzzgq2jZ4BCdbKXI9YxD0kTwEWpajWDWZcj2niXLJJIoBOjLKKePP4Qf1efDK\"\n            : process.env.JARVIS_CLIENT_SECRET || \"e6DQE5cSnD3qCYx6BpfBDLzNgZrI-wRobgrcpz4ylyKfBhv7ljkRZcrLuTk_Innt\",\n          code,\n          redirect_uri: redirectUri,\n          code_verifier: codeVerifier,\n        }),\n      });\n\n      if (!tokenResponse.ok) {\n        const errorText = await tokenResponse.text();\n        console.error('Token exchange failed:', errorText);\n        return res.status(401).json({ error: 'Token exchange failed' });\n      }\n\n      const tokens = await tokenResponse.json();\n      \n      // Return the ID token to the frontend\n      res.json({\n        idToken: tokens.id_token,\n        success: true,\n      });\n    } catch (error) {\n      console.error('Callback error:', error);\n      res.status(500).json({ error: \"Authentication callback failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { idToken, application } = req.body;\n      \n      if (!idToken || !application) {\n        return res.status(400).json({ error: \"ID token and application are required\" });\n      }\n\n      // Decode and validate the ID token\n      const decoded = oktaService.decodeIdToken(idToken);\n      const { sub: oktaUserId, email, given_name: firstName, family_name: lastName, exp } = decoded;\n\n      // Find or create user\n      let user = await storage.getUserByOktaId(oktaUserId);\n      if (!user) {\n        user = await storage.createUser({\n          username: email,\n          email,\n          firstName,\n          lastName,\n          oktaUserId,\n        });\n      }\n\n      // Create session\n      const sessionId = randomUUID();\n      const expiresAt = new Date(exp * 1000);\n      \n      const session = await storage.createAuthSession({\n        userId: user.id,\n        sessionId,\n        idToken,\n        expiresAt,\n        application,\n      });\n\n      res.json({\n        user: {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n        },\n        session: {\n          sessionId,\n          expiresAt,\n          application,\n        },\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(401).json({ error: \"Authentication failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/token-exchange\", authenticateToken, requireJarvisAccess, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { targetApp } = req.body;\n      \n      if (targetApp !== 'inventory') {\n        return res.status(400).json({ error: \"Only inventory app access is supported\" });\n      }\n\n      // Perform token exchange\n      console.log('Using ID token for exchange (first 50 chars):', req.session!.idToken.substring(0, 50) + '...');\n      \n      // Decode and check token expiration\n      const decodedToken = oktaService.decodeIdToken(req.session!.idToken);\n      const now = Math.floor(Date.now() / 1000);\n      console.log('Token details:', {\n        issued: new Date(decodedToken.iat * 1000).toISOString(),\n        expires: new Date(decodedToken.exp * 1000).toISOString(),\n        currentTime: new Date(now * 1000).toISOString(),\n        isExpired: now > decodedToken.exp,\n        audience: decodedToken.aud,\n        issuer: decodedToken.iss\n      });\n      \n      if (now > decodedToken.exp) {\n        return res.status(401).json({ error: \"ID token expired, please re-authenticate\" });\n      }\n      \n      // Token exchange debugging (can be enabled when needed)\n      // console.log('=== Token Exchange Debug ===');\n      // console.log('ID token length:', req.session!.idToken.length);\n      \n      const exchangeResult = await oktaService.exchangeJarvisToInventory(req.session!.idToken);\n      \n      // Log the token exchange\n      await storage.logTokenExchange({\n        userId: req.user!.id,\n        fromApp: 'jarvis',\n        toApp: 'inventory',\n        jagToken: exchangeResult.access_token,\n        success: true,\n      });\n\n      res.json({\n        success: true,\n        jagToken: exchangeResult.access_token,\n        expiresIn: exchangeResult.expires_in,\n        tokenType: exchangeResult.token_type,\n        issuedTokenType: exchangeResult.issued_token_type,\n      });\n    } catch (error) {\n      console.error(\"Token exchange error:\", error);\n      \n      // Log failed exchange\n      await storage.logTokenExchange({\n        userId: req.user!.id,\n        fromApp: 'jarvis',\n        toApp: 'inventory',\n        jagToken: '',\n        success: false,\n        errorMessage: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      res.status(500).json({ error: \"Token exchange failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/sessions\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const sessions = await storage.getUserSessions(req.user!.id);\n      const tokenHistory = await storage.getTokenExchangeHistory(req.user!.id);\n      \n      res.json({\n        sessions: sessions.map(s => ({\n          id: s.id,\n          application: s.application,\n          createdAt: s.createdAt,\n          expiresAt: s.expiresAt,\n          idTokenPreview: s.idToken.substring(0, 20) + '...',\n        })),\n        tokenExchangeHistory: tokenHistory.map(t => ({\n          id: t.id,\n          fromApp: t.fromApp,\n          toApp: t.toApp,\n          success: t.success,\n          createdAt: t.createdAt,\n          errorMessage: t.errorMessage,\n        })),\n      });\n    } catch (error) {\n      console.error(\"Sessions error:\", error);\n      res.status(500).json({ error: \"Failed to fetch sessions\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.deleteAuthSession(req.session!.sessionId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      res.status(500).json({ error: \"Logout failed\" });\n    }\n  });\n\n  // Warehouse routes\n  app.get(\"/api/warehouses\", authenticateToken, requireInventoryAccess, async (req, res) => {\n    try {\n      const warehouses = await storage.getWarehouses();\n      res.json(warehouses);\n    } catch (error) {\n      console.error(\"Warehouses error:\", error);\n      res.status(500).json({ error: \"Failed to fetch warehouses\" });\n    }\n  });\n\n  // Inventory routes\n  app.get(\"/api/inventory/:warehouseId\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { warehouseId } = req.params;\n      const items = await storage.getInventoryByWarehouse(warehouseId);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Inventory error:\", error);\n      res.status(500).json({ error: \"Failed to fetch inventory\" });\n    }\n  });\n\n  app.post(\"/api/inventory\", authenticateToken, requireInventoryAccess, async (req, res) => {\n    try {\n      const itemData = insertInventoryItemSchema.parse(req.body);\n      const item = await storage.createInventoryItem(itemData);\n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid item data\", details: error.errors });\n      }\n      console.error(\"Create inventory error:\", error);\n      res.status(500).json({ error: \"Failed to create inventory item\" });\n    }\n  });\n\n  app.put(\"/api/inventory/:id\", authenticateToken, requireInventoryAccess, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const item = await storage.updateInventoryItem(id, updateData);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Update inventory error:\", error);\n      res.status(500).json({ error: \"Failed to update inventory item\" });\n    }\n  });\n\n  app.delete(\"/api/inventory/:id\", authenticateToken, requireInventoryAccess, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteInventoryItem(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Delete inventory error:\", error);\n      res.status(500).json({ error: \"Failed to delete inventory item\" });\n    }\n  });\n\n  // Inventory app token exchange endpoint\n  app.post('/api/inventory/token-exchange', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { jagToken } = req.body;\n      \n      if (!jagToken) {\n        return res.status(400).json({ success: false, error: 'JAG token required' });\n      }\n\n      // Simulate inventory application token exchange\n      // In real implementation, this would validate the JAG token and issue an app-specific token\n      const applicationToken = `inv_app_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;\n      \n      console.log(`Inventory app token exchange: JAG token → Application token`);\n      console.log(`JAG token preview: ${jagToken.substring(0, 50)}...`);\n      console.log(`Application token: ${applicationToken}`);\n\n      res.json({\n        success: true,\n        applicationToken: applicationToken,\n        tokenType: 'inventory_access_token',\n        expiresIn: 3600\n      });\n    } catch (error) {\n      console.error('Inventory token exchange error:', error);\n      res.status(500).json({ success: false, error: 'Token exchange failed' });\n    }\n  });\n\n  // Jarvis cross-app inventory access - now uses application token for data access\n  app.get(\"/api/jarvis/inventory\", async (req, res) => {\n    try {\n      const applicationToken = req.headers['x-app-token'] as string;\n      const authHeader = req.headers.authorization;\n      \n      if (!applicationToken && !authHeader) {\n        return res.status(401).json({ error: \"Application token or authentication required for inventory access\" });\n      }\n\n      // Verify application token if provided, or fall back to regular auth\n      if (applicationToken) {\n        try {\n          // Verify the application token is valid (basic check - in production you'd validate the token)\n          if (!applicationToken.startsWith('inv_app_')) {\n            throw new Error('Invalid application token format');\n          }\n          console.log(`Using application token for inventory access: ${applicationToken.substring(0, 20)}...`);\n        } catch (error) {\n          return res.status(401).json({ error: \"Invalid application token\" });\n        }\n      }\n\n      // Get inventory data from local storage\n      const warehouses = await storage.getWarehouses();\n      const inventoryData = await Promise.all(\n        warehouses.map(async (warehouse) => {\n          const items = await storage.getInventoryByWarehouse(warehouse.id);\n          return {\n            warehouse,\n            items,\n            totalItems: items.length,\n            lowStockItems: items.filter(item => item.quantity <= (item.minStockLevel || 0)),\n          };\n        })\n      );\n\n      res.json(inventoryData);\n    } catch (error) {\n      console.error(\"Jarvis inventory error:\", error);\n      res.status(500).json({ error: \"Failed to fetch inventory data\" });\n    }\n  });\n\n  app.get(\"/api/jarvis/inventory/:warehouseId\", authenticateToken, requireJarvisAccess, async (req, res) => {\n    try {\n      const { warehouseId } = req.params;\n      const warehouse = await storage.getWarehouse(warehouseId);\n      const items = await storage.getInventoryByWarehouse(warehouseId);\n      \n      res.json({\n        warehouse,\n        items,\n        totalItems: items.length,\n        lowStockItems: items.filter(item => item.quantity <= (item.minStockLevel || 0)),\n      });\n    } catch (error) {\n      console.error(\"Jarvis warehouse inventory error:\", error);\n      res.status(500).json({ error: \"Failed to fetch warehouse inventory\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n\n","size_bytes":13407},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type Warehouse, type InsertWarehouse,\n  type InventoryItem, type InsertInventoryItem, type AuthSession, type InsertAuthSession,\n  type TokenExchangeLog, type InsertTokenExchangeLog\n} from \"@shared/types\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByOktaId(oktaUserId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n\n  // Warehouse management\n  getWarehouses(): Promise<Warehouse[]>;\n  getWarehouse(id: string): Promise<Warehouse | undefined>;\n  createWarehouse(warehouse: InsertWarehouse): Promise<Warehouse>;\n\n  // Inventory management\n  getInventoryByWarehouse(warehouseId: string): Promise<InventoryItem[]>;\n  getInventoryItem(id: string): Promise<InventoryItem | undefined>;\n  createInventoryItem(item: InsertInventoryItem): Promise<InventoryItem>;\n  updateInventoryItem(id: string, item: Partial<InsertInventoryItem>): Promise<InventoryItem>;\n  deleteInventoryItem(id: string): Promise<void>;\n  getInventoryBySku(sku: string): Promise<InventoryItem[]>;\n\n  // Auth session management\n  createAuthSession(session: InsertAuthSession): Promise<AuthSession>;\n  getAuthSession(sessionId: string): Promise<AuthSession | undefined>;\n  updateAuthSession(sessionId: string, session: Partial<InsertAuthSession>): Promise<AuthSession>;\n  deleteAuthSession(sessionId: string): Promise<void>;\n  getUserSessions(userId: string): Promise<AuthSession[]>;\n\n  // Token exchange logging\n  logTokenExchange(log: InsertTokenExchangeLog): Promise<TokenExchangeLog>;\n  getTokenExchangeHistory(userId: string): Promise<TokenExchangeLog[]>;\n}\n\nexport class MemoryStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private warehouses: Map<string, Warehouse> = new Map();\n  private inventoryItems: Map<string, InventoryItem> = new Map();\n  private authSessions: Map<string, AuthSession> = new Map();\n  private tokenExchangeLog: TokenExchangeLog[] = [];\n\n  constructor() {\n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Create default warehouses\n    const californiaWarehouse: Warehouse = {\n      id: \"warehouse-ca-001\",\n      name: \"West Coast Distribution\",\n      location: \"Los Angeles, CA\",\n      state: \"California\",\n      active: true,\n      createdAt: new Date()\n    };\n\n    const texasWarehouse: Warehouse = {\n      id: \"warehouse-tx-001\", \n      name: \"Central Distribution Hub\",\n      location: \"Austin, TX\",\n      state: \"Texas\",\n      active: true,\n      createdAt: new Date()\n    };\n\n    const nevadaWarehouse: Warehouse = {\n      id: \"warehouse-nv-001\",\n      name: \"Desert Springs Depot\",\n      location: \"Las Vegas, NV\", \n      state: \"Nevada\",\n      active: true,\n      createdAt: new Date()\n    };\n\n    this.warehouses.set(californiaWarehouse.id, californiaWarehouse);\n    this.warehouses.set(texasWarehouse.id, texasWarehouse);\n    this.warehouses.set(nevadaWarehouse.id, nevadaWarehouse);\n\n    // Create default inventory for California\n    const californiaInventory: InventoryItem[] = [\n      {\n        id: \"item-ca-001\",\n        warehouseId: californiaWarehouse.id,\n        name: \"Premium Cola Classic\",\n        sku: \"COLA-PREM-001\",\n        category: \"Soft Drinks\",\n        quantity: 150,\n        minStockLevel: 50,\n        price: 2.99,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"item-ca-002\",\n        warehouseId: californiaWarehouse.id,\n        name: \"Craft IPA Selection\",\n        sku: \"BEER-IPA-001\",\n        category: \"Alcoholic Beverages\",\n        quantity: 45,\n        minStockLevel: 25,\n        price: 8.99,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"item-ca-003\",\n        warehouseId: californiaWarehouse.id,\n        name: \"Energy Boost Original\",\n        sku: \"ENERGY-ORIG-001\",\n        category: \"Energy Drinks\",\n        quantity: 200,\n        minStockLevel: 75,\n        price: 3.49,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"item-ca-004\",\n        warehouseId: californiaWarehouse.id,\n        name: \"Sparkling Water Lemon\",\n        sku: \"WATER-SPARK-001\",\n        category: \"Water\",\n        quantity: 30,\n        minStockLevel: 50,\n        price: 1.99,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"item-ca-005\",\n        warehouseId: californiaWarehouse.id,\n        name: \"Organic Green Tea\",\n        sku: \"TEA-GREEN-001\",\n        category: \"Tea\",\n        quantity: 80,\n        minStockLevel: 40,\n        price: 4.99,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n\n    // Create default inventory for Texas\n    const texasInventory: InventoryItem[] = [\n      {\n        id: \"item-tx-001\",\n        warehouseId: texasWarehouse.id,\n        name: \"Sweet Tea Southern Style\",\n        sku: \"TEA-SWEET-001\",\n        category: \"Tea\",\n        quantity: 120,\n        minStockLevel: 60,\n        price: 2.49,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"item-tx-002\",\n        warehouseId: texasWarehouse.id,\n        name: \"Local Root Beer\",\n        sku: \"SODA-ROOT-001\",\n        category: \"Soft Drinks\",\n        quantity: 85,\n        minStockLevel: 40,\n        price: 3.99,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"item-tx-003\",\n        warehouseId: texasWarehouse.id,\n        name: \"Sports Hydration Blue\",\n        sku: \"SPORTS-HYD-001\",\n        category: \"Sports Drinks\",\n        quantity: 180,\n        minStockLevel: 80,\n        price: 2.79,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"item-tx-004\",\n        warehouseId: texasWarehouse.id,\n        name: \"BBQ Cola Limited\",\n        sku: \"COLA-BBQ-001\",\n        category: \"Soft Drinks\",\n        quantity: 25,\n        minStockLevel: 30,\n        price: 4.49,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n\n    // Create default inventory for Nevada\n    const nevadaInventory: InventoryItem[] = [\n      {\n        id: \"item-nv-001\",\n        warehouseId: nevadaWarehouse.id,\n        name: \"Desert Spring Water\",\n        sku: \"WATER-SPRING-001\",\n        category: \"Water\",\n        quantity: 300,\n        minStockLevel: 100,\n        price: 1.49,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"item-nv-002\", \n        warehouseId: nevadaWarehouse.id,\n        name: \"Premium Mixer Tonic\",\n        sku: \"MIXER-TONIC-001\",\n        category: \"Mixers\",\n        quantity: 75,\n        minStockLevel: 35,\n        price: 5.99,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"item-nv-003\",\n        warehouseId: nevadaWarehouse.id,\n        name: \"Luxury Vodka Selection\",\n        sku: \"VODKA-LUX-001\", \n        category: \"Spirits\",\n        quantity: 40,\n        minStockLevel: 20,\n        price: 89.99,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"item-nv-004\",\n        warehouseId: nevadaWarehouse.id,\n        name: \"Casino Energy Rush\",\n        sku: \"ENERGY-CASINO-001\",\n        category: \"Energy Drinks\",\n        quantity: 15,\n        minStockLevel: 25,\n        price: 4.99,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n\n    // Store all inventory items\n    [...californiaInventory, ...texasInventory, ...nevadaInventory].forEach(item => {\n      this.inventoryItems.set(item.id, item);\n    });\n\n    console.log('✅ Memory storage initialized with demo data:');\n    console.log(`   - ${this.warehouses.size} warehouses`);\n    console.log(`   - ${this.inventoryItems.size} inventory items`);\n  }\n  // User management\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    for (const user of this.users.values()) {\n      if (user.username === username) return user;\n    }\n    return undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    for (const user of this.users.values()) {\n      if (user.email === email) return user;\n    }\n    return undefined;\n  }\n\n  async getUserByOktaId(oktaUserId: string): Promise<User | undefined> {\n    for (const user of this.users.values()) {\n      if (user.oktaUserId === oktaUserId) return user;\n    }\n    return undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const user: User = {\n      id: randomUUID(),\n      ...insertUser,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updateUser: Partial<InsertUser>): Promise<User> {\n    const existingUser = this.users.get(id);\n    if (!existingUser) {\n      throw new Error(`User with id ${id} not found`);\n    }\n    \n    const updatedUser: User = {\n      ...existingUser,\n      ...updateUser,\n      updatedAt: new Date()\n    };\n    \n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Warehouse management\n  async getWarehouses(): Promise<Warehouse[]> {\n    return Array.from(this.warehouses.values()).filter(w => w.active);\n  }\n\n  async getWarehouse(id: string): Promise<Warehouse | undefined> {\n    return this.warehouses.get(id);\n  }\n\n  async createWarehouse(insertWarehouse: InsertWarehouse): Promise<Warehouse> {\n    const warehouse: Warehouse = {\n      id: randomUUID(),\n      ...insertWarehouse,\n      createdAt: new Date()\n    };\n    this.warehouses.set(warehouse.id, warehouse);\n    return warehouse;\n  }\n\n  // Inventory management\n  async getInventoryByWarehouse(warehouseId: string): Promise<InventoryItem[]> {\n    return Array.from(this.inventoryItems.values())\n      .filter(item => item.warehouseId === warehouseId);\n  }\n\n  async getInventoryItem(id: string): Promise<InventoryItem | undefined> {\n    return this.inventoryItems.get(id);\n  }\n\n  async createInventoryItem(insertItem: InsertInventoryItem): Promise<InventoryItem> {\n    const item: InventoryItem = {\n      id: randomUUID(),\n      ...insertItem,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.inventoryItems.set(item.id, item);\n    return item;\n  }\n\n  async updateInventoryItem(id: string, updateItem: Partial<InsertInventoryItem>): Promise<InventoryItem> {\n    const existingItem = this.inventoryItems.get(id);\n    if (!existingItem) {\n      throw new Error(`Inventory item with id ${id} not found`);\n    }\n    \n    const updatedItem: InventoryItem = {\n      ...existingItem,\n      ...updateItem,\n      updatedAt: new Date()\n    };\n    \n    this.inventoryItems.set(id, updatedItem);\n    return updatedItem;\n  }\n\n  async deleteInventoryItem(id: string): Promise<void> {\n    this.inventoryItems.delete(id);\n  }\n\n  async getInventoryBySku(sku: string): Promise<InventoryItem[]> {\n    return Array.from(this.inventoryItems.values())\n      .filter(item => item.sku === sku);\n  }\n\n  // Auth session management\n  async createAuthSession(insertSession: InsertAuthSession): Promise<AuthSession> {\n    const session: AuthSession = {\n      id: randomUUID(),\n      ...insertSession,\n      createdAt: new Date()\n    };\n    this.authSessions.set(session.sessionId, session);\n    return session;\n  }\n\n  async getAuthSession(sessionId: string): Promise<AuthSession | undefined> {\n    return this.authSessions.get(sessionId);\n  }\n\n  async updateAuthSession(sessionId: string, updateSession: Partial<InsertAuthSession>): Promise<AuthSession> {\n    const existingSession = this.authSessions.get(sessionId);\n    if (!existingSession) {\n      throw new Error(`Auth session with sessionId ${sessionId} not found`);\n    }\n    \n    const updatedSession: AuthSession = {\n      ...existingSession,\n      ...updateSession\n    };\n    \n    this.authSessions.set(sessionId, updatedSession);\n    return updatedSession;\n  }\n\n  async deleteAuthSession(sessionId: string): Promise<void> {\n    this.authSessions.delete(sessionId);\n  }\n\n  async getUserSessions(userId: string): Promise<AuthSession[]> {\n    return Array.from(this.authSessions.values())\n      .filter(session => session.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  // Token exchange logging\n  async logTokenExchange(insertLog: InsertTokenExchangeLog): Promise<TokenExchangeLog> {\n    const log: TokenExchangeLog = {\n      id: randomUUID(),\n      ...insertLog,\n      createdAt: new Date()\n    };\n    this.tokenExchangeLog.push(log);\n    return log;\n  }\n\n  async getTokenExchangeHistory(userId: string): Promise<TokenExchangeLog[]> {\n    return this.tokenExchangeLog\n      .filter(log => log.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n}\n\nexport const storage = new MemoryStorage();\n","size_bytes":13121},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport InventoryApp from \"@/pages/inventory/InventoryApp\";\nimport JarvisApp from \"@/pages/jarvis/JarvisApp\";\nimport Landing from \"@/pages/Landing\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/inventory\" component={InventoryApp} />\n      <Route path=\"/login/callback\" component={InventoryApp} />\n      <Route path=\"/jarvis\" component={JarvisApp} />\n      <Route path=\"/jarvis/callback\" component={JarvisApp} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1055},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Atlas Beverages Colors */\n  --atlas-primary: hsl(213 88% 41%);\n  --atlas-secondary: hsl(213 77% 54%);\n  --atlas-accent: hsl(159 78% 42%);\n  --atlas-light: hsl(210 40% 98%);\n  --atlas-gray: hsl(215 16% 47%);\n\n  /* Jarvis Colors */\n  --jarvis-gold: hsl(43 96% 56%);\n  --jarvis-gold-light: hsl(43 91% 48%);\n  --jarvis-blue: hsl(199 89% 48%);\n  --jarvis-blue-light: hsl(200 98% 39%);\n  --jarvis-dark: hsl(222 84% 5%);\n  --jarvis-dark-light: hsl(215 28% 17%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Atlas Beverages Styles */\n.atlas-gradient {\n  background: linear-gradient(135deg, var(--atlas-primary) 0%, var(--atlas-secondary) 100%);\n}\n\n.atlas-glow {\n  box-shadow: 0 0 20px rgba(30, 64, 175, 0.3);\n}\n\n/* Jarvis Styles */\n.jarvis-glow {\n  box-shadow: 0 0 20px rgba(251, 191, 36, 0.3);\n}\n\n.jarvis-text-glow {\n  text-shadow: 0 0 10px rgba(251, 191, 36, 0.5);\n}\n\n.jarvis-bg {\n  background: linear-gradient(135deg, var(--jarvis-dark) 0%, var(--jarvis-dark-light) 50%, hsl(215 20% 31%) 100%);\n}\n\n/* Animation Utilities */\n@keyframes fadeIn {\n  0% { opacity: 0; transform: translateY(10px); }\n  100% { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slideUp {\n  0% { transform: translateY(20px); opacity: 0; }\n  100% { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes spin-slow {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n@keyframes spin-reverse {\n  0% { transform: rotate(360deg); }\n  100% { transform: rotate(0deg); }\n}\n\n@keyframes pulse-glow {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n.animate-spin-slow {\n  animation: spin-slow 3s linear infinite;\n}\n\n.animate-spin-reverse {\n  animation: spin-reverse 4s linear infinite;\n}\n\n.animate-pulse-glow {\n  animation: pulse-glow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Token Display */\n.token-display {\n  font-family: 'Courier New', monospace;\n  background: linear-gradient(135deg, hsl(210 40% 98%) 0%, hsl(220 13% 91%) 100%);\n}\n\n/* Inventory Shadows */\n.inventory-shadow {\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n","size_bytes":7231},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\nimport { oktaService } from \"./okta\";\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    oktaUserId: string;\n  };\n  session?: {\n    id: string;\n    sessionId: string;\n    application: string;\n    idToken: string;\n    expiresAt: Date;\n  };\n}\n\nexport async function authenticateToken(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    const authHeader = req.headers.authorization;\n    const sessionId = req.headers['x-session-id'] as string;\n\n    console.log('Auth debug:', { authHeader: authHeader ? 'present' : 'missing', sessionId: sessionId ? 'present' : 'missing' });\n\n    if (!authHeader || !sessionId) {\n      return res.status(401).json({ error: 'No authentication token or session provided' });\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    \n    // Verify token is not expired\n    if (oktaService.isTokenExpired(token)) {\n      return res.status(401).json({ error: 'Token has expired' });\n    }\n\n    // Get session from database\n    const session = await storage.getAuthSession(sessionId);\n    if (!session) {\n      return res.status(401).json({ error: 'Invalid session' });\n    }\n\n    // Check session expiry\n    if (new Date() > session.expiresAt) {\n      await storage.deleteAuthSession(sessionId);\n      return res.status(401).json({ error: 'Session has expired' });\n    }\n\n    // Get user\n    const user = await storage.getUser(session.userId);\n    if (!user) {\n      return res.status(401).json({ error: 'User not found' });\n    }\n\n    // Attach user and session to request\n    req.user = {\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      oktaUserId: user.oktaUserId!,\n    };\n\n    req.session = {\n      id: session.id,\n      sessionId: session.sessionId,\n      application: session.application,\n      idToken: session.idToken,\n      expiresAt: session.expiresAt,\n    };\n\n    next();\n  } catch (error) {\n    console.error('Authentication error:', error);\n    res.status(401).json({ error: 'Authentication failed' });\n  }\n}\n\nexport async function requireInventoryAccess(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  if (!req.session || req.session.application !== 'inventory') {\n    return res.status(403).json({ error: 'Inventory access required' });\n  }\n  next();\n}\n\nexport async function requireJarvisAccess(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  if (!req.session || req.session.application !== 'jarvis') {\n    return res.status(403).json({ error: 'Jarvis access required' });\n  }\n  next();\n}\n","size_bytes":2761},"server/services/okta.ts":{"content":"interface OktaConfig {\n  domain: string;\n  orgAuthServer: string;\n  inventoryClientId: string;\n  inventoryClientSecret: string;\n  jarvisClientId: string;\n  jarvisClientSecret: string;\n}\n\nconst oktaConfig: OktaConfig = {\n  domain: \"fcxdemo.okta.com\",\n  orgAuthServer: \"https://fcxdemo.okta.com/oauth2\",\n  inventoryClientId: \"0oau8x7jn10yYmlhw697\",\n  inventoryClientSecret: process.env.INVENTORY_CLIENT_SECRET || \"Ixvrzzgq2jZ4BCdbKXI9YxD0kTwEWpajWDWZcj2niXLJJIoBOjLKKePP4Qf1efDK\",\n  jarvisClientId: \"0oau8wb0eiLgOCT1X697\",\n  jarvisClientSecret: process.env.JARVIS_CLIENT_SECRET || \"e6DQE5cSnD3qCYx6BpfBDLzNgZrI-wRobgrcpz4ylyKfBhv7ljkRZcrLuTk_Innt\",\n};\n\nexport interface TokenExchangeRequest {\n  subjectToken: string;\n  audience: string;\n  clientId: string;\n  clientSecret: string;\n}\n\nexport interface TokenExchangeResponse {\n  issued_token_type: string;\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n}\n\nexport class OktaService {\n  private config: OktaConfig;\n\n  constructor() {\n    this.config = oktaConfig;\n  }\n\n  async performTokenExchange(request: TokenExchangeRequest): Promise<TokenExchangeResponse> {\n    const tokenUrl = `https://${this.config.domain}/oauth2/v1/token`;\n    \n    const formData = new URLSearchParams({\n      'grant_type': 'urn:ietf:params:oauth:grant-type:token-exchange',\n      'requested_token_type': 'urn:ietf:params:oauth:token-type:id-jag',\n      'subject_token': request.subjectToken,\n      'subject_token_type': 'urn:ietf:params:oauth:token-type:id_token',\n      'audience': request.audience,\n      'client_id': request.clientId,\n      'client_secret': request.clientSecret,\n    });\n\n    console.log('Token exchange request:', {\n      url: tokenUrl,\n      audience: request.audience,\n      clientId: request.clientId,\n      subjectTokenPreview: request.subjectToken.substring(0, 100) + '...',\n      subjectTokenLength: request.subjectToken.length\n    });\n\n    console.log('Making token exchange request with body:', formData.toString());\n    \n    // Try with axios to match curl behavior more closely\n    const { default: axios } = await import('axios');\n    console.log('Using axios for token exchange...');\n    \n    try {\n      const response = await axios.post(tokenUrl, formData.toString(), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        timeout: 10000\n      });\n      \n      console.log('Axios response status:', response.status);\n      return response.data;\n      \n    } catch (axiosError: any) {\n      console.error('Axios failed, trying fetch:', axiosError.response?.data || axiosError.message);\n      \n      // Fallback to fetch\n      const response = await fetch(tokenUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Fetch also failed:', { status: response.status, error: errorText });\n        throw new Error(`Token exchange failed: ${response.status} - ${errorText}`);\n      }\n      \n      return response.json();\n    }\n  }\n\n  async exchangeJarvisToInventory(idToken: string): Promise<TokenExchangeResponse> {\n    return this.performTokenExchange({\n      subjectToken: idToken,\n      audience: 'http://localhost:5001', // Inventory application audience\n      clientId: this.config.jarvisClientId,\n      clientSecret: this.config.jarvisClientSecret,\n    });\n  }\n\n  getInventoryClientConfig() {\n    return {\n      clientId: this.config.inventoryClientId,\n      domain: this.config.domain,\n      redirectUri: `http://localhost:5000/login/callback`,\n      scope: ['openid', 'profile', 'email'],\n    };\n  }\n\n  getJarvisClientConfig() {\n    return {\n      clientId: this.config.jarvisClientId,\n      domain: this.config.domain,\n      redirectUri: `http://localhost:5000/jarvis/callback`,\n      scope: ['openid', 'profile', 'email'],\n    };\n  }\n\n  decodeIdToken(idToken: string): any {\n    try {\n      const base64Url = idToken.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(\n        atob(base64)\n          .split('')\n          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n      );\n      return JSON.parse(jsonPayload);\n    } catch (error) {\n      throw new Error('Invalid ID token format');\n    }\n  }\n\n  isTokenExpired(token: string): boolean {\n    try {\n      const decoded = this.decodeIdToken(token);\n      const now = Math.floor(Date.now() / 1000);\n      return decoded.exp < now;\n    } catch {\n      return true;\n    }\n  }\n}\n\nexport const oktaService = new OktaService();\n","size_bytes":4725},"client/src/components/AuthGuard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { authService, type AuthState } from \"@/lib/auth\";\nimport { getOktaConfig, type OktaConfig } from \"@/lib/okta-config\";\nimport { generateCodeVerifier, generateCodeChallenge, buildAuthUrl } from \"@/lib/auth\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface AuthGuardProps {\n  children: React.ReactNode;\n  application: 'inventory' | 'jarvis';\n  title: string;\n  description: string;\n  icon: string;\n  theme: 'atlas' | 'jarvis';\n}\n\nexport default function AuthGuard({ \n  children, \n  application, \n  title, \n  description, \n  icon, \n  theme \n}: AuthGuardProps) {\n  const [authState, setAuthState] = useState<AuthState>(authService.getState());\n  const [isLoading, setIsLoading] = useState(false);\n  const [config] = useState<OktaConfig>(getOktaConfig(application));\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe(setAuthState);\n    return unsubscribe;\n  }, []);\n\n  useEffect(() => {\n    // Handle OAuth callback - let backend handle token exchange\n    const handleCallback = async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get('code');\n      const state = urlParams.get('state');\n      const storedState = sessionStorage.getItem('oauth_state');\n      const codeVerifier = sessionStorage.getItem('code_verifier');\n\n      console.log('Callback debug:', { code, state, storedState, codeVerifier });\n      \n      if (code && state === storedState && codeVerifier) {\n        setIsLoading(true);\n        try {\n          const requestBody = {\n            code,\n            state,\n            application,\n            redirectUri: config.redirectUri,\n            codeVerifier,\n          };\n          console.log('Sending callback request:', requestBody);\n          \n          // Send the authorization code to backend for token exchange\n          const response = await fetch('/api/auth/callback', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(requestBody),\n          });\n\n          if (!response.ok) {\n            throw new Error('Authentication failed');\n          }\n\n          const data = await response.json();\n          authService.setIdToken(data.idToken);\n          await authService.login(data.idToken, application);\n\n          // Clean up\n          sessionStorage.removeItem('oauth_state');\n          sessionStorage.removeItem('code_verifier');\n          \n          // Force state update\n          setAuthState(authService.getState());\n          \n          window.history.replaceState({}, document.title, window.location.pathname);\n        } catch (error) {\n          console.error('Authentication error:', error);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    handleCallback();\n  }, [config, application]);\n\n  const handleLogin = async () => {\n    setIsLoading(true);\n    try {\n      const codeVerifier = generateCodeVerifier();\n      const codeChallenge = await generateCodeChallenge(codeVerifier);\n      const state = crypto.randomUUID();\n\n      sessionStorage.setItem('code_verifier', codeVerifier);\n      sessionStorage.setItem('oauth_state', state);\n\n      const authUrl = buildAuthUrl(config, codeChallenge, state);\n      window.location.href = authUrl;\n    } catch (error) {\n      console.error('Login error:', error);\n      setIsLoading(false);\n    }\n  };\n\n  const isAppAuthenticated = authState.isAuthenticated && authState.session?.application === application;\n  \n\n  if (isAppAuthenticated) {\n    return <>{children}</>;\n  }\n\n  const themeClasses = {\n    atlas: {\n      bg: \"bg-white\",\n      gradient: \"bg-gradient-to-r from-blue-600 to-blue-700\",\n      iconBg: \"bg-gradient-to-br from-blue-600 to-blue-700\",\n      accent: \"text-blue-600\",\n      dots: \"bg-blue-600\",\n    },\n    jarvis: {\n      bg: \"bg-slate-800/90 border-blue-400/30 backdrop-blur-sm\",\n      gradient: \"bg-gradient-to-r from-blue-500 to-cyan-500 text-white\",\n      iconBg: \"bg-gradient-to-br from-blue-500 to-cyan-500\",\n      accent: \"text-blue-400\",\n      dots: \"bg-blue-400\",\n    },\n  };\n\n  const styles = themeClasses[theme];\n\n  return (\n    <div className={`fixed inset-0 flex items-center justify-center z-50 ${theme === 'jarvis' ? 'bg-gradient-to-br from-blue-900 via-blue-800 to-blue-900 overflow-hidden' : 'bg-black/50'}`}>\n      {/* Enhanced radial spinning background for Jarvis */}\n      {theme === 'jarvis' && (\n        <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none overflow-hidden\">\n          {/* Outer ring with radial lines */}\n          <div className=\"relative w-96 h-96\">\n            <div className=\"absolute inset-0 animate-spin\" style={{ animationDuration: '8s' }}>\n              {Array.from({ length: 24 }).map((_, i) => (\n                <div\n                  key={i}\n                  className=\"absolute w-1 bg-blue-400/30\"\n                  style={{\n                    height: '48px',\n                    left: '50%',\n                    top: '0',\n                    transformOrigin: '50% 192px',\n                    transform: `translateX(-50%) rotate(${i * 15}deg)`,\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n          \n          {/* Middle ring with shorter lines */}\n          <div className=\"absolute relative w-64 h-64\">\n            <div className=\"absolute inset-0 animate-spin\" style={{ animationDuration: '6s', animationDirection: 'reverse' }}>\n              {Array.from({ length: 16 }).map((_, i) => (\n                <div\n                  key={i}\n                  className=\"absolute w-1 bg-blue-300/40\"\n                  style={{\n                    height: '32px',\n                    left: '50%',\n                    top: '0',\n                    transformOrigin: '50% 128px',\n                    transform: `translateX(-50%) rotate(${i * 22.5}deg)`,\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n          \n          {/* Inner ring with accent lines */}\n          <div className=\"absolute relative w-32 h-32\">\n            <div className=\"absolute inset-0 animate-spin\" style={{ animationDuration: '4s' }}>\n              {Array.from({ length: 8 }).map((_, i) => (\n                <div\n                  key={i}\n                  className={`absolute w-1 ${i % 3 === 0 ? 'bg-cyan-400/60' : 'bg-blue-200/50'}`}\n                  style={{\n                    height: '20px',\n                    left: '50%',\n                    top: '0',\n                    transformOrigin: '50% 64px',\n                    transform: `translateX(-50%) rotate(${i * 45}deg)`,\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n      <Card className={`w-full max-w-md mx-4 animate-fade-in relative z-10 ${styles.bg} ${theme === 'jarvis' ? 'shadow-blue-400/20 shadow-2xl' : ''}`}>\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center mb-6\">\n            <div className={`w-16 h-16 ${styles.iconBg} rounded-full flex items-center justify-center mx-auto mb-4 relative`}>\n              <i className={`${icon} text-white text-2xl`} />\n              {theme === 'jarvis' && (\n                <div className=\"absolute inset-0 w-16 h-16 border-2 border-blue-400/50 rounded-full animate-spin\" style={{ animationDuration: '2s' }} />\n              )}\n            </div>\n            <h2 className={`text-2xl font-bold ${theme === 'jarvis' ? 'text-white' : 'text-gray-900'}`}>\n              {title}\n            </h2>\n            <p className={`${styles.accent} mt-2`}>{description}</p>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {isLoading ? (\n              <div className=\"text-center\">\n                <p className={`text-sm mb-4 ${theme === 'jarvis' ? 'text-blue-300' : 'text-gray-600'}`}>\n                  {theme === 'jarvis' ? 'Starting authentication...' : 'Authenticating with enterprise identity provider...'}\n                </p>\n                <div className=\"flex items-center justify-center space-x-2\">\n                  <div className={`w-3 h-3 ${styles.dots}/60 rounded-full`}>\n                    <div className={`w-full h-full ${styles.dots} rounded-full animate-ping`} />\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <Button \n                onClick={handleLogin}\n                className={`w-full ${styles.gradient} font-medium hover:opacity-90 transition-opacity shadow-lg`}\n                data-testid={`button-login-${application}`}\n              >\n                {theme === 'jarvis' ? 'Sign in with Okta' : `Continue to ${title}`}\n              </Button>\n            )}\n          </div>\n          \n          <div className={`mt-6 text-center text-xs ${theme === 'jarvis' ? 'text-blue-400/80' : 'text-gray-500'}`}>\n            <p>Secured by Enterprise SSO</p>\n            <p className=\"mt-1\">\n              {theme === 'jarvis' ? 'Cross-Interface Access • Token Exchange' : 'PKCE • OpenID Connect'}\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9268},"client/src/components/TokenSidebar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { authService } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, Key, Clock, CheckCircle, XCircle, Eye, EyeOff, Copy } from \"lucide-react\";\n\ninterface TokenSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface SessionData {\n  sessions: Array<{\n    id: string;\n    application: string;\n    createdAt: string;\n    expiresAt: string;\n    idTokenPreview: string;\n  }>;\n  tokenExchangeHistory: Array<{\n    id: string;\n    fromApp: string;\n    toApp: string;\n    success: boolean;\n    createdAt: string;\n    errorMessage?: string;\n    jagToken?: string;\n  }>;\n}\n\nexport default function TokenSidebar({ isOpen, onClose }: TokenSidebarProps) {\n  const authState = authService.getState();\n  const [revealedTokens, setRevealedTokens] = useState<Set<string>>(new Set());\n  \n  const { data: sessionData } = useQuery<SessionData>({\n    queryKey: [\"/api/auth/sessions\"],\n    enabled: authState.isAuthenticated,\n  });\n\n  // Get current session tokens only - clear stale tokens on auth state change\n  useEffect(() => {\n    if (!authState.isAuthenticated) {\n      // Clear all tokens when logged out\n      localStorage.removeItem('jag_token');\n      localStorage.removeItem('application_token');\n      localStorage.removeItem('atlas_id_token');\n    }\n  }, [authState.isAuthenticated]);\n\n  const currentSession = sessionData?.sessions?.find(s => s.application === 'jarvis');\n  const jagToken = localStorage.getItem('jag_token') || '';\n  const applicationToken = localStorage.getItem('application_token') || '';\n  const hasJagToken = jagToken.length > 0;\n  const hasApplicationToken = applicationToken.length > 0;\n\n  const toggleTokenReveal = (sessionId: string) => {\n    const newRevealed = new Set(revealedTokens);\n    if (newRevealed.has(sessionId)) {\n      newRevealed.delete(sessionId);\n    } else {\n      newRevealed.add(sessionId);\n    }\n    setRevealedTokens(newRevealed);\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n  };\n\n  const getFullIdToken = () => {\n    return localStorage.getItem('atlas_id_token') || '';\n  };\n\n  const getJagToken = () => {\n    return localStorage.getItem('jag_token') || '';\n  };\n\n  const getApplicationToken = () => {\n    return localStorage.getItem('application_token') || '';\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const getAppDisplayName = (app: string) => {\n    const names = {\n      inventory: \"Atlas Beverages\",\n      jarvis: \"Jarvis AI\",\n    };\n    return names[app as keyof typeof names] || app;\n  };\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/20 z-40\"\n          onClick={onClose}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div \n        className={`fixed right-0 top-16 h-full w-80 bg-white shadow-xl border-l border-gray-200 transform transition-transform duration-300 z-50 ${\n          isOpen ? 'translate-x-0' : 'translate-x-full'\n        }`}\n        data-testid=\"sidebar-tokens\"\n      >\n        <div className=\"p-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <Key className=\"w-5 h-5 mr-2\" />\n              Authentication Tokens\n            </h3>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={onClose}\n              data-testid=\"button-close-sidebar\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"p-4 space-y-4 overflow-y-auto h-full pb-20\">\n          {/* Current Session */}\n          {authState.user && (\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">Current Session</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-sm\">\n                <div>\n                  <span className=\"font-medium\">User:</span> \n                  <span className=\"ml-2\" data-testid=\"text-current-user\">\n                    {authState.user.email}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"font-medium\">Status:</span> \n                  <Badge variant=\"secondary\" className=\"ml-2 bg-green-100 text-green-800\">\n                    Active\n                  </Badge>\n                </div>\n                {authState.session && (\n                  <div>\n                    <span className=\"font-medium\">Expires:</span> \n                    <span className=\"ml-2\" data-testid=\"text-session-expires\">\n                      {formatDate(authState.session.expiresAt)}\n                    </span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* ID Token */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm\">ID Token</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2 text-sm\">\n              <div>\n                <span className=\"font-medium\">Type:</span> \n                <span className=\"ml-2\">ID Token (OIDC)</span>\n              </div>\n              <div>\n                <span className=\"font-medium\">Status:</span> \n                <Badge variant=\"secondary\" className=\"ml-2 bg-blue-100 text-blue-800\">\n                  {authState.user ? \"Active\" : \"Missing\"}\n                </Badge>\n              </div>\n              {getFullIdToken() && (\n                <div className=\"bg-gray-100 p-2 rounded text-xs break-all font-mono\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-gray-600\">ID Token:</span>\n                    <div className=\"flex gap-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => toggleTokenReveal('id')}\n                        className=\"h-6 w-6 p-0\"\n                        data-testid=\"button-reveal-id-token\"\n                      >\n                        {revealedTokens.has('id') ? (\n                          <EyeOff className=\"w-3 h-3\" />\n                        ) : (\n                          <Eye className=\"w-3 h-3\" />\n                        )}\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(getFullIdToken())}\n                        className=\"h-6 w-6 p-0\"\n                        data-testid=\"button-copy-id-token\"\n                      >\n                        <Copy className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <span data-testid=\"text-id-token\">\n                    {revealedTokens.has('id') ? getFullIdToken() : getFullIdToken().substring(0, 20) + '...'}\n                  </span>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* JAG Token - Only show after obtained */}\n          {hasJagToken && (\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">JAG Token (Okta Cross-App)</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-sm\">\n                <div>\n                  <span className=\"font-medium\">Type:</span> \n                  <span className=\"ml-2\">urn:ietf:params:oauth:token-type:id-jag</span>\n                </div>\n                <div>\n                  <span className=\"font-medium\">Purpose:</span> \n                  <Badge variant=\"secondary\" className=\"ml-2 bg-orange-100 text-orange-800\">\n                    Authorization to Inventory App\n                  </Badge>\n                </div>\n                <div className=\"bg-gray-100 p-2 rounded text-xs break-all font-mono\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-gray-600\">JAG Token:</span>\n                    <div className=\"flex gap-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => toggleTokenReveal('jag')}\n                        className=\"h-6 w-6 p-0\"\n                        data-testid=\"button-reveal-jag-token\"\n                      >\n                        {revealedTokens.has('jag') ? (\n                          <EyeOff className=\"w-3 h-3\" />\n                        ) : (\n                          <Eye className=\"w-3 h-3\" />\n                        )}\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(getJagToken())}\n                        className=\"h-6 w-6 p-0\"\n                        data-testid=\"button-copy-jag-token\"\n                      >\n                        <Copy className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <span data-testid=\"text-jag-token\">\n                    {revealedTokens.has('jag') ? getJagToken() : getJagToken().substring(0, 20) + '...'}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Application Token - Only show after inventory app token exchange */}\n          {hasApplicationToken && (\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">Application Token</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-sm\">\n                <div>\n                  <span className=\"font-medium\">Type:</span> \n                  <span className=\"ml-2\">Inventory Access Token</span>\n                </div>\n                <div>\n                  <span className=\"font-medium\">Access:</span> \n                  <Badge variant=\"secondary\" className=\"ml-2 bg-green-100 text-green-800\">\n                    Inventory Data Access\n                  </Badge>\n                </div>\n                <div className=\"bg-gray-100 p-2 rounded text-xs break-all font-mono\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-gray-600\">App Token:</span>\n                    <div className=\"flex gap-1\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => toggleTokenReveal('app')}\n                        className=\"h-6 w-6 p-0\"\n                        data-testid=\"button-reveal-app-token\"\n                      >\n                        {revealedTokens.has('app') ? (\n                          <EyeOff className=\"w-3 h-3\" />\n                        ) : (\n                          <Eye className=\"w-3 h-3\" />\n                        )}\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => copyToClipboard(getApplicationToken())}\n                        className=\"h-6 w-6 p-0\"\n                        data-testid=\"button-copy-app-token\"\n                      >\n                        <Copy className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                  <span data-testid=\"text-app-token\">\n                    {revealedTokens.has('app') ? getApplicationToken() : getApplicationToken().substring(0, 20) + '...'}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n\n\n          {/* Token Flow Status - Only show when tokens are present */}\n          {(hasJagToken || hasApplicationToken) && (\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">Token Flow Status</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 text-sm\">\n                <div>\n                  <span className=\"font-medium\">ID Token:</span> \n                  <Badge variant=\"secondary\" className=\"ml-2 bg-blue-100 text-blue-800\">\n                    ✓ Active\n                  </Badge>\n                </div>\n                {hasJagToken && (\n                  <div>\n                    <span className=\"font-medium\">JAG Token:</span> \n                    <Badge variant=\"secondary\" className=\"ml-2 bg-orange-100 text-orange-800\">\n                      ✓ Obtained\n                    </Badge>\n                  </div>\n                )}\n                {hasApplicationToken && (\n                  <div>\n                    <span className=\"font-medium\">App Token:</span> \n                    <Badge variant=\"secondary\" className=\"ml-2 bg-green-100 text-green-800\">\n                      ✓ Data Access\n                    </Badge>\n                  </div>\n                )}\n                <div className=\"text-xs text-gray-500 pt-2\">\n                  {hasApplicationToken \n                    ? \"Complete token flow: ID → JAG → Inventory Access\"\n                    : hasJagToken \n                    ? \"Token exchange in progress...\"\n                    : \"Ready for cross-app authentication\"\n                  }\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n\n\n          {/* Empty State */}\n          {(!sessionData || sessionData.sessions.length === 0) && authState.isAuthenticated && (\n            <Card>\n              <CardContent className=\"text-center py-8\">\n                <Key className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-sm text-gray-500\">No token data available</p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":14589},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { apiRequest, setAuthHeadersGetter } from \"./queryClient\";\n\nexport interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface AuthSession {\n  sessionId: string;\n  expiresAt: string;\n  application: string;\n}\n\nexport interface AuthState {\n  user: User | null;\n  session: AuthSession | null;\n  isAuthenticated: boolean;\n}\n\nexport class AuthService {\n  private authState: AuthState = {\n    user: null,\n    session: null,\n    isAuthenticated: false,\n  };\n\n  private listeners: Array<(state: AuthState) => void> = [];\n\n  constructor() {\n    this.loadStoredAuth();\n    // Register auth headers function with query client\n    setAuthHeadersGetter(() => this.getAuthHeaders());\n  }\n\n  subscribe(listener: (state: AuthState) => void): () => void {\n    this.listeners.push(listener);\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  getState(): AuthState {\n    return { ...this.authState };\n  }\n\n  private notify() {\n    this.listeners.forEach(listener => listener(this.getState()));\n  }\n\n  private loadStoredAuth() {\n    try {\n      const stored = localStorage.getItem('atlas_auth');\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        if (new Date(parsed.session?.expiresAt) > new Date()) {\n          this.authState = { ...parsed, isAuthenticated: true };\n          this.notify();\n        } else {\n          this.clearAuth();\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load stored auth:', error);\n      this.clearAuth();\n    }\n  }\n\n  private storeAuth() {\n    try {\n      localStorage.setItem('atlas_auth', JSON.stringify({\n        user: this.authState.user,\n        session: this.authState.session,\n      }));\n    } catch (error) {\n      console.error('Failed to store auth:', error);\n    }\n  }\n\n  private clearAuth() {\n    this.authState = {\n      user: null,\n      session: null,\n      isAuthenticated: false,\n    };\n    \n    // Clear all tokens on logout\n    localStorage.removeItem('atlas_auth');\n    localStorage.removeItem('atlas_id_token');\n    localStorage.removeItem('jag_token');\n    localStorage.removeItem('application_token');\n    localStorage.removeItem('okta-token-storage');\n    localStorage.removeItem('okta-cache-storage');\n    \n    this.notify();\n  }\n\n  async login(idToken: string, application: 'inventory' | 'jarvis'): Promise<void> {\n    try {\n      const response = await apiRequest('POST', '/api/auth/login', {\n        idToken,\n        application,\n      });\n\n      const data = await response.json();\n      \n      this.authState = {\n        user: data.user,\n        session: data.session,\n        isAuthenticated: true,\n      };\n\n      // Store the ID token for API authentication\n      this.setIdToken(idToken);\n      \n      this.storeAuth();\n      this.notify();\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error;\n    }\n  }\n\n  async logout(): Promise<void> {\n    try {\n      if (this.authState.session) {\n        await apiRequest('POST', '/api/auth/logout', {});\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      this.clearAuth();\n    }\n  }\n\n  async exchangeToken(targetApp: string): Promise<{ jagToken: string; expiresIn: number }> {\n    try {\n      const response = await apiRequest('POST', '/api/auth/token-exchange', {\n        targetApp,\n      });\n\n      return await response.json();\n    } catch (error) {\n      console.error('Token exchange failed:', error);\n      throw error;\n    }\n  }\n\n  getAuthHeaders(): Record<string, string> {\n    if (!this.authState.session) {\n      return {};\n    }\n\n    return {\n      'Authorization': `Bearer ${this.getIdToken()}`,\n      'X-Session-Id': this.authState.session.sessionId,\n    };\n  }\n\n  private getIdToken(): string {\n    // This should be stored securely, but for demo purposes we'll reconstruct it\n    // In a real app, you'd store the full token securely\n    return localStorage.getItem('atlas_id_token') || '';\n  }\n\n  setIdToken(token: string): void {\n    localStorage.setItem('atlas_id_token', token);\n  }\n}\n\nexport const authService = new AuthService();\n\n// PKCE helper functions\nexport function generateCodeVerifier(): string {\n  const array = new Uint8Array(32);\n  crypto.getRandomValues(array);\n  return btoa(String.fromCharCode.apply(null, Array.from(array)))\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n}\n\nexport async function generateCodeChallenge(verifier: string): Promise<string> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(verifier);\n  const digest = await crypto.subtle.digest('SHA-256', data);\n  return btoa(String.fromCharCode.apply(null, Array.from(new Uint8Array(digest))))\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=/g, '');\n}\n\nexport function buildAuthUrl(config: any, codeChallenge: string, state: string): string {\n  const params = new URLSearchParams({\n    client_id: config.clientId,\n    response_type: 'code',\n    scope: config.scopes.join(' '),\n    redirect_uri: config.redirectUri,\n    code_challenge: codeChallenge,\n    code_challenge_method: 'S256',\n    state,\n  });\n\n  return `${config.issuer}/v1/authorize?${params.toString()}`;\n}\n","size_bytes":5308},"client/src/lib/okta-config.ts":{"content":"export interface OktaConfig {\n  clientId: string;\n  issuer: string;\n  redirectUri: string;\n  scopes: string[];\n  pkce: boolean;\n}\n\nexport const INVENTORY_OKTA_CONFIG: OktaConfig = {\n  clientId: \"0oau8x7jn10yYmlhw697\",\n  issuer: \"https://fcxdemo.okta.com/oauth2\",\n  redirectUri: `${window.location.origin}/login/callback`,\n  scopes: [\"openid\", \"profile\", \"email\"],\n  pkce: true,\n};\n\nexport const JARVIS_OKTA_CONFIG: OktaConfig = {\n  clientId: \"0oau8wb0eiLgOCT1X697\",\n  issuer: \"https://fcxdemo.okta.com/oauth2\",\n  redirectUri: `${window.location.origin}/jarvis/callback`,\n  scopes: [\"openid\", \"profile\", \"email\"],\n  pkce: true,\n};\n\nexport function getOktaConfig(app: 'inventory' | 'jarvis'): OktaConfig {\n  return app === 'inventory' ? INVENTORY_OKTA_CONFIG : JARVIS_OKTA_CONFIG;\n}\n","size_bytes":781},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\n// Import the auth service to get headers\nlet getAuthHeaders: () => Record<string, string>;\n\n// We'll set this after the auth module loads to avoid circular imports\nexport function setAuthHeadersGetter(fn: () => Record<string, string>) {\n  getAuthHeaders = fn;\n}\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  // Add authentication headers if available\n  if (getAuthHeaders) {\n    Object.assign(headers, getAuthHeaders());\n  }\n\n  // For inventory requests, use application token if available\n  if (url.includes('/api/jarvis/inventory')) {\n    const applicationToken = localStorage.getItem('application_token');\n    if (applicationToken) {\n      headers['X-App-Token'] = applicationToken;\n    }\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const headers: Record<string, string> = {};\n    \n    // Add authentication headers if available\n    if (getAuthHeaders) {\n      Object.assign(headers, getAuthHeaders());\n    }\n\n    // For inventory requests, use application token if available\n    const queryUrl = queryKey.join(\"/\");\n    if (queryUrl.includes('/api/jarvis/inventory')) {\n      const applicationToken = localStorage.getItem('application_token');\n      if (applicationToken) {\n        headers['X-App-Token'] = applicationToken;\n      }\n    }\n\n    const res = await fetch(queryUrl as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2600},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Landing.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Boxes, Bot, ArrowRight, Shield, Zap } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100\">\n      {/* Header */}\n      <nav className=\"bg-white/80 backdrop-blur-sm shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                Enterprise AI Platform\n              </h1>\n            </div>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <Shield className=\"w-4 h-4\" />\n              <span>Secured by Enterprise SSO</span>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-5xl font-bold text-gray-900 mb-6\">\n            Welcome to the Enterprise AI Platform\n          </h1>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Access powerful AI tools and inventory management systems with enterprise-grade security and seamless authentication.\n          </p>\n        </div>\n\n        {/* Application Cards */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n          {/* Atlas Beverages */}\n          <Card className=\"group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-2 hover:border-blue-200\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-blue-600 to-blue-700 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform\">\n                <Boxes className=\"w-10 h-10 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl text-gray-900\">Atlas Beverages</CardTitle>\n              <p className=\"text-gray-600\">Comprehensive Inventory Management</p>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <div className=\"w-2 h-2 bg-blue-600 rounded-full mr-3\" />\n                  Multi-warehouse inventory tracking\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <div className=\"w-2 h-2 bg-blue-600 rounded-full mr-3\" />\n                  Real-time stock level monitoring\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <div className=\"w-2 h-2 bg-blue-600 rounded-full mr-3\" />\n                  Low stock alerts and reorder management\n                </div>\n                <div className=\"flex items-center text-sm text-gray-600\">\n                  <div className=\"w-2 h-2 bg-blue-600 rounded-full mr-3\" />\n                  Texas, California, and Nevada locations\n                </div>\n              </div>\n              <Link href=\"/inventory\">\n                <Button className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-medium py-3\" data-testid=\"button-access-inventory\">\n                  Access Inventory System\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* Jarvis AI */}\n          <Card className=\"group hover:shadow-xl transition-all duration-300 hover:-translate-y-1 border-2 hover:border-amber-200 bg-gradient-to-br from-slate-900 to-slate-800 text-white\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"relative mx-auto mb-4\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-amber-400 to-amber-500 rounded-full flex items-center justify-center group-hover:scale-110 transition-transform\">\n                  <Bot className=\"w-10 h-10 text-slate-900\" />\n                </div>\n                <div className=\"absolute inset-0 w-20 h-20 border-2 border-amber-400 rounded-full animate-spin opacity-30 group-hover:animate-pulse\" />\n              </div>\n              <CardTitle className=\"text-2xl text-white\">J.A.R.V.I.S</CardTitle>\n              <p className=\"text-amber-400\">Just A Rather Very Intelligent System</p>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center text-sm text-gray-300\">\n                  <Zap className=\"w-3 h-3 text-amber-400 mr-3\" />\n                  AI-powered inventory analysis\n                </div>\n                <div className=\"flex items-center text-sm text-gray-300\">\n                  <Zap className=\"w-3 h-3 text-amber-400 mr-3\" />\n                  Cross-application data access\n                </div>\n                <div className=\"flex items-center text-sm text-gray-300\">\n                  <Zap className=\"w-3 h-3 text-amber-400 mr-3\" />\n                  Intelligent reporting and insights\n                </div>\n                <div className=\"flex items-center text-sm text-gray-300\">\n                  <Zap className=\"w-3 h-3 text-amber-400 mr-3\" />\n                  Natural language interaction\n                </div>\n              </div>\n              <Link href=\"/jarvis\">\n                <Button className=\"w-full bg-gradient-to-r from-amber-400 to-amber-500 hover:from-amber-500 hover:to-amber-600 text-slate-900 font-medium py-3\" data-testid=\"button-access-jarvis\">\n                  Initialize J.A.R.V.I.S\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Features */}\n        <div className=\"mt-16 text-center\">\n          <h2 className=\"text-3xl font-bold text-gray-900 mb-8\">Enterprise Security Features</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">PKCE Authentication</h3>\n              <p className=\"text-gray-600\">Proof Key for Code Exchange ensures secure OAuth flows</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Zap className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Cross-App Access</h3>\n              <p className=\"text-gray-600\">Secure token exchange between applications</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Bot className=\"w-8 h-8 text-purple-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">AI Integration</h3>\n              <p className=\"text-gray-600\">Enterprise AI with secure data access</p>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":7783},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/inventory/InventoryApp.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { authService, type AuthState } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport AuthGuard from \"@/components/AuthGuard\";\nimport WarehouseInventory from \"./WarehouseInventory\";\nimport TokenSidebar from \"@/components/TokenSidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin, Package, AlertTriangle, Key, User, Home } from \"lucide-react\";\n\ninterface Warehouse {\n  id: string;\n  name: string;\n  location: string;\n  state: string;\n}\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  sku: string;\n  category: string;\n  quantity: number;\n  minStockLevel: number;\n}\n\nexport default function InventoryApp() {\n  const [selectedWarehouse, setSelectedWarehouse] = useState<string>(\"\");\n  const [authState, setAuthState] = useState<AuthState>(authService.getState());\n  const [isTokenSidebarOpen, setIsTokenSidebarOpen] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe(setAuthState);\n    return unsubscribe;\n  }, []);\n\n  const handleLogout = async () => {\n    await authService.logout();\n  };\n\n  const getUserInitials = () => {\n    if (!authState.user) return \"U\";\n    return `${authState.user.firstName[0]}${authState.user.lastName[0]}`;\n  };\n\n  const { data: warehouses, isLoading: warehousesLoading } = useQuery<Warehouse[]>({\n    queryKey: [\"/api/warehouses\"],\n    enabled: authState.isAuthenticated && authState.session?.application === 'inventory',\n  });\n\n  const { data: allInventory, isLoading: inventoryLoading } = useQuery<InventoryItem[]>({\n    queryKey: [\"/api/inventory\", selectedWarehouse],\n    enabled: !!selectedWarehouse && authState.isAuthenticated && authState.session?.application === 'inventory',\n  });\n\n  // Calculate statistics\n  const totalSKUs = allInventory?.length || 0;\n  const lowStockItems = allInventory?.filter(item => item.quantity <= item.minStockLevel) || [];\n\n  return (\n    <AuthGuard\n      application=\"inventory\"\n      title=\"Atlas Beverages\"\n      description=\"Secure Inventory Management\"\n      icon=\"fas fa-boxes\"\n      theme=\"atlas\"\n    >\n      <div className=\"h-full flex flex-col bg-gray-50\">\n        {/* Navigation Header */}\n        <nav className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-30\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center h-16\">\n              <div className=\"flex items-center space-x-8\">\n                <div className=\"flex-shrink-0\">\n                  <h1 className=\"text-xl font-bold text-gray-900\" data-testid=\"text-app-title\">\n                    Atlas Beverages\n                  </h1>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => window.location.href = '/'}\n                  className=\"text-gray-500 hover:text-gray-700\"\n                  data-testid=\"button-home\"\n                >\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  <span className=\"hidden sm:inline\">Home</span>\n                </Button>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsTokenSidebarOpen(true)}\n                  className=\"text-gray-500 hover:text-gray-700\"\n                  data-testid=\"button-toggle-tokens\"\n                >\n                  <Key className=\"w-4 h-4 mr-2\" />\n                  <span className=\"hidden sm:inline\">Tokens</span>\n                </Button>\n                {authState.user && (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white text-sm font-medium\" data-testid=\"text-user-initials\">\n                        {getUserInitials()}\n                      </span>\n                    </div>\n                    <span className=\"text-sm text-gray-700\" data-testid=\"text-user-name\">\n                      {authState.user.firstName} {authState.user.lastName}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleLogout}\n                      data-testid=\"button-logout\"\n                    >\n                      Logout\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </nav>\n        \n        {/* Header */}\n        <div className=\"bg-white shadow-sm border-b border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-inventory-title\">\n                Atlas Beverages Inventory\n              </h1>\n              <p className=\"text-gray-600 mt-1\">Manage warehouse inventory across all locations</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Card className=\"bg-blue-50\">\n                <CardContent className=\"p-3\">\n                  <div className=\"text-sm text-blue-600\">Total SKUs</div>\n                  <div className=\"text-2xl font-bold text-blue-700\" data-testid=\"text-total-skus\">\n                    {totalSKUs}\n                  </div>\n                </CardContent>\n              </Card>\n              <Card className=\"bg-red-50\">\n                <CardContent className=\"p-3\">\n                  <div className=\"text-sm text-red-600\">Low Stock Alerts</div>\n                  <div className=\"text-2xl font-bold text-red-700\" data-testid=\"text-low-stock-count\">\n                    {lowStockItems.length}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n\n        {/* Warehouse Tabs */}\n        <div className=\"bg-white border-b border-gray-200\">\n          <div className=\"flex px-6\">\n            {warehousesLoading ? (\n              <div className=\"py-4 text-gray-500\">Loading warehouses...</div>\n            ) : (\n              warehouses?.map((warehouse) => (\n                <button\n                  key={warehouse.id}\n                  onClick={() => setSelectedWarehouse(warehouse.id)}\n                  className={`py-4 px-6 text-sm font-medium border-b-2 transition-colors ${\n                    selectedWarehouse === warehouse.id\n                      ? \"border-blue-600 text-blue-600\"\n                      : \"border-transparent text-gray-500 hover:text-gray-700\"\n                  }`}\n                  data-testid={`button-warehouse-${warehouse.state.toLowerCase()}`}\n                >\n                  <MapPin className=\"w-4 h-4 inline-block mr-2\" />\n                  {warehouse.name}\n                </button>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-auto\">\n          {!selectedWarehouse ? (\n            <div className=\"flex items-center justify-center h-full\">\n              <Card className=\"max-w-md\">\n                <CardContent className=\"text-center py-8\">\n                  <Package className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                    Select a Warehouse\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    Choose a warehouse from the tabs above to view and manage inventory.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            <WarehouseInventory \n              warehouseId={selectedWarehouse} \n              warehouseName={warehouses?.find(w => w.id === selectedWarehouse)?.name || \"\"}\n            />\n          )}\n        </div>\n        \n        {/* Token Sidebar */}\n        <TokenSidebar \n          isOpen={isTokenSidebarOpen} \n          onClose={() => setIsTokenSidebarOpen(false)} \n        />\n      </div>\n    </AuthGuard>\n  );\n}\n","size_bytes":8281},"client/src/pages/inventory/WarehouseInventory.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Plus, Search, Edit, Trash2, Package, AlertTriangle } from \"lucide-react\";\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  sku: string;\n  category: string;\n  quantity: number;\n  minStockLevel: number;\n  warehouseId: string;\n}\n\ninterface WarehouseInventoryProps {\n  warehouseId: string;\n  warehouseName: string;\n}\n\nconst addItemSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  sku: z.string().min(1, \"SKU is required\"),\n  category: z.string().min(1, \"Category is required\"),\n  quantity: z.number().min(0, \"Quantity must be 0 or greater\"),\n  minStockLevel: z.number().min(0, \"Min stock level must be 0 or greater\"),\n});\n\ntype AddItemForm = z.infer<typeof addItemSchema>;\n\nexport default function WarehouseInventory({ warehouseId, warehouseName }: WarehouseInventoryProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: inventory, isLoading } = useQuery<InventoryItem[]>({\n    queryKey: [\"/api/inventory\", warehouseId],\n    enabled: !!warehouseId,\n  });\n\n  const form = useForm<AddItemForm>({\n    resolver: zodResolver(addItemSchema),\n    defaultValues: {\n      name: \"\",\n      sku: \"\",\n      category: \"Beverages\",\n      quantity: 0,\n      minStockLevel: 50,\n    },\n  });\n\n  const addItemMutation = useMutation({\n    mutationFn: async (data: AddItemForm) => {\n      const response = await apiRequest(\"POST\", \"/api/inventory\", {\n        ...data,\n        warehouseId,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\", warehouseId] });\n      form.reset();\n      toast({\n        title: \"Item Added\",\n        description: \"The inventory item has been successfully added.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add inventory item. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteItemMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      await apiRequest(\"DELETE\", `/api/inventory/${itemId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\", warehouseId] });\n      toast({\n        title: \"Item Deleted\",\n        description: \"The inventory item has been successfully removed.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete inventory item. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AddItemForm) => {\n    addItemMutation.mutate(data);\n  };\n\n  const handleDelete = (itemId: string, itemName: string) => {\n    if (confirm(`Are you sure you want to delete \"${itemName}\"?`)) {\n      deleteItemMutation.mutate(itemId);\n    }\n  };\n\n  const filteredInventory = inventory?.filter(item =>\n    item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    item.sku.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const getCategoryIcon = (category: string) => {\n    const icons: Record<string, string> = {\n      Beverages: \"🥤\",\n      Snacks: \"🍿\",\n      Packaging: \"📦\",\n      \"Raw Materials\": \"🏭\",\n    };\n    return icons[category] || \"📦\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\" />\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div className=\"h-96 bg-gray-200 rounded\" />\n            <div className=\"lg:col-span-2 h-96 bg-gray-200 rounded\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Add Item Form */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Plus className=\"w-5 h-5 mr-2\" />\n                Add New Item\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter product name\" {...field} data-testid=\"input-product-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"sku\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>SKU</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"SKU-12345\" {...field} data-testid=\"input-sku\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"quantity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Quantity</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"0\" \n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            data-testid=\"input-quantity\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"minStockLevel\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Min Stock Level</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder=\"50\" \n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                            data-testid=\"input-min-stock\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-category\">\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"Beverages\">Beverages</SelectItem>\n                            <SelectItem value=\"Snacks\">Snacks</SelectItem>\n                            <SelectItem value=\"Packaging\">Packaging</SelectItem>\n                            <SelectItem value=\"Raw Materials\">Raw Materials</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\"\n                    disabled={addItemMutation.isPending}\n                    data-testid=\"button-add-item\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    {addItemMutation.isPending ? \"Adding...\" : \"Add Item\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Inventory List */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"w-5 h-5 mr-2\" />\n                  Current Inventory - {warehouseName}\n                </CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"relative\">\n                    <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                    <Input\n                      placeholder=\"Search items...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10 w-64\"\n                      data-testid=\"input-search-inventory\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {filteredInventory.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Package className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                    {inventory?.length === 0 ? \"No Inventory Items\" : \"No Matching Items\"}\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    {inventory?.length === 0 \n                      ? \"Add your first inventory item using the form on the left.\"\n                      : \"Try adjusting your search terms.\"\n                    }\n                  </p>\n                </div>\n              ) : (\n                <div className=\"divide-y divide-gray-200\">\n                  {filteredInventory.map((item) => (\n                    <div key={item.id} className=\"p-4 hover:bg-gray-50 transition-colors\" data-testid={`item-${item.sku}`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center\">\n                            <div className=\"w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center mr-3\">\n                              <span className=\"text-xl\">{getCategoryIcon(item.category)}</span>\n                            </div>\n                            <div>\n                              <h4 className=\"font-medium text-gray-900\" data-testid={`text-item-name-${item.sku}`}>\n                                {item.name}\n                              </h4>\n                              <p className=\"text-sm text-gray-600\">\n                                SKU: {item.sku} • {item.category}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"text-right\">\n                            <div className=\"font-medium text-gray-900\" data-testid={`text-item-quantity-${item.sku}`}>\n                              {item.quantity} units\n                            </div>\n                            <div className={`text-sm flex items-center ${\n                              item.quantity <= item.minStockLevel ? \"text-red-600\" : \"text-green-600\"\n                            }`}>\n                              {item.quantity <= item.minStockLevel && (\n                                <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                              )}\n                              {item.quantity <= item.minStockLevel ? \"Low Stock\" : \"In Stock\"}\n                            </div>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-blue-600 hover:text-blue-700\"\n                              data-testid={`button-edit-${item.sku}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(item.id, item.name)}\n                              className=\"text-red-600 hover:text-red-700\"\n                              disabled={deleteItemMutation.isPending}\n                              data-testid={`button-delete-${item.sku}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14390},"client/src/pages/jarvis/ChatInterface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Bot, User, Send, Mic, ShieldCheck, AlertTriangle } from \"lucide-react\";\n\ninterface InventoryData {\n  warehouse: {\n    id: string;\n    name: string;\n    location: string;\n    state: string;\n  };\n  items: Array<{\n    id: string;\n    name: string;\n    sku: string;\n    category: string;\n    quantity: number;\n    minStockLevel: number;\n  }>;\n  totalItems: number;\n  lowStockItems: Array<{\n    id: string;\n    name: string;\n    sku: string;\n    quantity: number;\n    minStockLevel: number;\n  }>;\n}\n\ninterface ChatMessage {\n  id: string;\n  type: 'user' | 'jarvis' | 'system';\n  content: string;\n  timestamp: Date;\n  inventoryData?: InventoryData[];\n}\n\nexport default function ChatInterface() {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [hasAccessToken, setHasAccessToken] = useState(false);\n  const [jagToken, setJagToken] = useState<string | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: inventoryData } = useQuery<InventoryData[]>({\n    queryKey: [\"/mcp/inventory/query\"],\n    enabled: hasAccessToken,\n    queryFn: async () => {\n      const applicationToken = localStorage.getItem('application_token');\n      const response = await fetch('/mcp/inventory/query', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${applicationToken}`\n        },\n        body: JSON.stringify({\n          type: 'all_inventory'\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch inventory via MCP');\n      }\n      \n      const mcpResponse = await response.json();\n      return mcpResponse.data; // Extract data from MCP response wrapper\n    }\n  });\n\n  // Auto-display warehouse data after inventory is fetched\n  useEffect(() => {\n    if (inventoryData) {\n      const pendingRequest = localStorage.getItem('pending_warehouse_request');\n      if (pendingRequest) {\n        localStorage.removeItem('pending_warehouse_request');\n        \n        const warehouseData = inventoryData.find(w => w.warehouse.state === pendingRequest);\n        if (warehouseData) {\n          setTimeout(() => {\n            addMessage({\n              type: 'jarvis',\n              content: `Here's the current inventory status for ${warehouseData.warehouse.name}:`,\n              inventoryData: [warehouseData],\n            });\n          }, 500);\n        }\n      }\n    }\n  }, [inventoryData]);\n\n  // Step 1: Get JAG token from Okta\n  const jagTokenMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/auth/token-exchange', {\n        targetApp: 'inventory'\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setJagToken(data.jagToken);\n      localStorage.setItem('jag_token', data.jagToken);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/sessions\"] });\n      \n      addMessage({\n        type: 'system',\n        content: `JAG token obtained from Okta. Now exchanging for inventory application token...`,\n      });\n      \n      // Immediately trigger application token exchange\n      setTimeout(() => appTokenMutation.mutate(data.jagToken), 500);\n    },\n    onError: (error) => {\n      toast({\n        title: \"JAG Token Failed\",\n        description: \"Unable to obtain JAG token from Okta.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Step 2: Exchange JAG token for Application token via MCP Authorization Server (JWT-bearer flow)\n  const appTokenMutation = useMutation({\n    mutationFn: async (jagToken: string) => {\n      // Create Basic Auth header for MCP client credentials\n      const mcpClientId = 'mcp_inventory_server_001';\n      const mcpClientSecret = 'mcp_server_secret_2024_inventory_access';\n      const basicAuth = btoa(`${mcpClientId}:${mcpClientSecret}`);\n      \n      const response = await fetch('/oauth2/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': `Basic ${basicAuth}`\n        },\n        body: new URLSearchParams({\n          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n          assertion: jagToken\n        })\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error_description || 'MCP token exchange failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setHasAccessToken(true);\n      localStorage.setItem('application_token', data.access_token);\n      queryClient.invalidateQueries({ queryKey: [\"/mcp/inventory/query\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/sessions\"] });\n      \n      addMessage({\n        type: 'system',\n        content: `MCP authorization server validated JAG token and issued access token. Cross-app authentication complete. Now fetching inventory data...`,\n      });\n    },\n    onError: (error) => {\n      console.error('MCP Token Exchange Error:', error);\n      toast({\n        title: \"MCP Token Exchange Failed\",\n        description: error.message || \"Unable to exchange JAG token via MCP server.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    // Initialize with welcome message\n    addMessage({\n      type: 'jarvis',\n      content: `Good ${getTimeOfDay()}, ${authService.getState().user?.firstName}. I'm J.A.R.V.I.S, your AI assistant with enterprise access to Atlas Beverages inventory system. How can I assist you today?`,\n    });\n    \n    // Note: Token exchange will happen only when inventory data is requested\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  const getTimeOfDay = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return \"morning\";\n    if (hour < 18) return \"afternoon\";\n    return \"evening\";\n  };\n\n  const addMessage = (message: Omit<ChatMessage, 'id' | 'timestamp'>) => {\n    const newMessage: ChatMessage = {\n      ...message,\n      id: crypto.randomUUID(),\n      timestamp: new Date(),\n    };\n    setMessages(prev => [...prev, newMessage]);\n  };\n\n  const handleSendMessage = () => {\n    if (!inputValue.trim()) return;\n\n    // Add user message\n    addMessage({\n      type: 'user',\n      content: inputValue,\n    });\n\n    // Process the message\n    processUserMessage(inputValue);\n    setInputValue(\"\");\n  };\n\n  const processUserMessage = (message: string) => {\n    const lowerMessage = message.toLowerCase();\n\n    // Simulate processing delay\n    setTimeout(() => {\n      if (lowerMessage.includes('inventory') || lowerMessage.includes('stock')) {\n        if (!hasAccessToken) {\n          addMessage({\n            type: 'jarvis',\n            content: 'I need to establish cross-app access first. Let me authenticate with the inventory system...',\n          });\n          jagTokenMutation.mutate();\n          return;\n        }\n\n        if (inventoryData) {\n          addMessage({\n            type: 'jarvis',\n            content: `I've accessed the Atlas Beverages inventory system through cross-app authentication. Here's the current status across all warehouses:`,\n            inventoryData,\n          });\n        } else {\n          addMessage({\n            type: 'jarvis',\n            content: 'Let me fetch the latest inventory data for you...',\n          });\n          queryClient.invalidateQueries({ queryKey: [\"/mcp/inventory/query\"] });\n        }\n      } else if (lowerMessage.includes('texas') || lowerMessage.includes('california') || lowerMessage.includes('nevada') ||\n                 lowerMessage.includes('west coast') || lowerMessage.includes('central') || lowerMessage.includes('desert')) {\n        // Map user input to warehouse states and names\n        let state = '';\n        let warehouseName = '';\n        \n        if (lowerMessage.includes('texas') || lowerMessage.includes('central')) {\n          state = 'Texas';\n          warehouseName = 'Central Distribution Hub';\n        } else if (lowerMessage.includes('california') || lowerMessage.includes('west coast')) {\n          state = 'California'; \n          warehouseName = 'West Coast Distribution';\n        } else if (lowerMessage.includes('nevada') || lowerMessage.includes('desert')) {\n          state = 'Nevada';\n          warehouseName = 'Desert Springs Depot';\n        }\n        \n        if (!hasAccessToken) {\n          addMessage({\n            type: 'jarvis',\n            content: 'I need to establish cross-app access first. Let me authenticate with the inventory system...',\n          });\n          // Store the requested state for auto-display after token exchange\n          localStorage.setItem('pending_warehouse_request', state);\n          jagTokenMutation.mutate();\n          return;\n        }\n\n        const warehouseData = inventoryData?.find(w => w.warehouse.state === state);\n        \n        if (warehouseData) {\n          addMessage({\n            type: 'jarvis',\n            content: `Here's the current inventory status for ${warehouseData.warehouse.name} (${warehouseData.warehouse.location}):`,\n            inventoryData: [warehouseData],\n          });\n        } else {\n          addMessage({\n            type: 'jarvis',\n            content: `I don't have access to ${warehouseName} data at the moment. Let me refresh the inventory information.`,\n          });\n        }\n      } else if (lowerMessage.includes('low stock') || lowerMessage.includes('reorder')) {\n        const allLowStock = inventoryData?.flatMap(w => \n          w.lowStockItems.map(item => ({ ...item, warehouse: w.warehouse.name }))\n        ) || [];\n\n        if (allLowStock.length > 0) {\n          addMessage({\n            type: 'jarvis',\n            content: `I've identified ${allLowStock.length} items with low stock levels that require immediate attention. These items are below their minimum stock thresholds and should be reordered soon.`,\n          });\n        } else {\n          addMessage({\n            type: 'jarvis',\n            content: 'Great news! All inventory items are currently above their minimum stock levels. No immediate reorders are required.',\n          });\n        }\n      } else if (lowerMessage.includes('help') || lowerMessage.includes('what can you do')) {\n        addMessage({\n          type: 'jarvis',\n          content: 'I can help you with:\\n\\n• View inventory levels across all warehouses\\n• Check specific warehouse inventory:\\n  - West Coast Distribution (California)\\n  - Central Distribution Hub (Texas)\\n  - Desert Springs Depot (Nevada)\\n• Identify low stock items and reorder recommendations\\n• Generate inventory reports and analytics\\n• Monitor stock movements and trends\\n\\nWhat would you like to know about the Atlas Beverages inventory?',\n        });\n      } else {\n        addMessage({\n          type: 'jarvis',\n          content: \"I'm here to help with Atlas Beverages inventory management. You can ask me about stock levels, warehouse status, low stock alerts, or reorder recommendations. What would you like to know?\",\n        });\n      }\n    }, 1000);\n  };\n\n  const suggestedQuestions = [\n    \"Check California warehouse\",\n    \"Generate reorder report\", \n    \"Low stock analysis\",\n    \"Show all warehouse status\"\n  ];\n\n  const formatInventoryData = (data: InventoryData[]) => {\n    return data.map(warehouse => (\n      <Card key={warehouse.warehouse.id} className=\"bg-slate-800 border-amber-400/30 mt-3\">\n        <CardContent className=\"p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <h4 className=\"font-medium text-amber-400\">{warehouse.warehouse.name}</h4>\n            <Badge variant=\"secondary\" className=\"bg-slate-700 text-amber-400\">\n              {warehouse.totalItems} SKUs\n            </Badge>\n          </div>\n          <div className=\"grid grid-cols-2 gap-3 text-sm\">\n            {warehouse.items.slice(0, 4).map((item) => (\n              <div key={item.id}>\n                <div className=\"text-amber-400\">{item.name}</div>\n                <div className={`font-medium ${\n                  item.quantity <= item.minStockLevel ? \"text-red-400\" : \"text-white\"\n                }`}>\n                  {item.quantity} units {item.quantity <= item.minStockLevel && \"⚠️\"}\n                </div>\n              </div>\n            ))}\n          </div>\n          {warehouse.lowStockItems.length > 0 && (\n            <div className=\"mt-2 pt-2 border-t border-slate-700\">\n              <div className=\"text-red-400 text-xs flex items-center\">\n                <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                {warehouse.lowStockItems.length} item(s) need reordering\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    ));\n  };\n\n  return (\n    <div className=\"h-full flex flex-col relative overflow-hidden\">\n      {/* Background spinning wheels */}\n      <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n        <div className=\"w-[800px] h-[800px] border-2 border-amber-400/10 rounded-full animate-spin-slow\" />\n        <div className=\"absolute w-[600px] h-[600px] border border-amber-400/5 rounded-full animate-spin-slow\" style={{ animationDirection: 'reverse', animationDuration: '8s' }} />\n        <div className=\"absolute w-[400px] h-[400px] border border-amber-400/3 rounded-full animate-spin-slow\" style={{ animationDuration: '12s' }} />\n      </div>\n      {/* Header */}\n      <div className=\"bg-slate-800/90 backdrop-blur-sm shadow-xl border-b border-amber-400/30 p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <div className=\"relative mr-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-amber-400 to-amber-500 rounded-full flex items-center justify-center animate-pulse\">\n                <Bot className=\"w-6 h-6 text-slate-900\" />\n              </div>\n              <div className=\"absolute inset-0 w-12 h-12 border border-amber-400 rounded-full animate-spin opacity-50\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-white\" style={{ textShadow: '0 0 10px rgba(251, 191, 36, 0.5)' }}>\n                J.A.R.V.I.S\n              </h1>\n              <p className=\"text-amber-400\">AI Assistant with Enterprise Access</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Card className=\"bg-slate-900 border-amber-400/30\">\n              <CardContent className=\"p-3\">\n                <div className=\"text-sm text-amber-400\">System Status</div>\n                <div className=\"text-xl font-bold text-white\">ONLINE</div>\n              </CardContent>\n            </Card>\n            <Card className=\"bg-slate-900 border-amber-400/30\">\n              <CardContent className=\"p-3\">\n                <div className=\"text-sm text-amber-400\">Connected Apps</div>\n                <div className=\"text-xl font-bold text-white\">{hasAccessToken ? \"1\" : \"0\"}</div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Chat Messages */}\n      <div className=\"flex-1 overflow-auto p-6\">\n        <div className=\"max-w-4xl mx-auto space-y-4\">\n          {messages.map((message) => (\n            <div key={message.id} className={`flex items-start space-x-3 ${\n              message.type === 'user' ? 'justify-end' : ''\n            }`}>\n              {message.type !== 'user' && (\n                <div className=\"w-10 h-10 bg-gradient-to-br from-amber-400 to-amber-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Bot className=\"w-5 h-5 text-slate-900\" />\n                </div>\n              )}\n              \n              <div className={`rounded-2xl px-4 py-3 max-w-2xl ${\n                message.type === 'user' \n                  ? 'bg-blue-600 text-white' \n                  : message.type === 'system'\n                  ? 'bg-green-700 text-white'\n                  : 'bg-slate-800 border border-amber-400/30 text-white'\n              }`}>\n                <p className=\"whitespace-pre-line\" data-testid={`message-${message.type}-${message.id}`}>\n                  {message.content}\n                </p>\n                \n                {message.inventoryData && (\n                  <div className=\"mt-3\">\n                    {formatInventoryData(message.inventoryData)}\n                  </div>\n                )}\n              </div>\n\n              {message.type === 'user' && (\n                <div className=\"w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <User className=\"w-5 h-5 text-white\" />\n                </div>\n              )}\n            </div>\n          ))}\n          \n          {/* Suggested Actions */}\n          {messages.length <= 2 && (\n            <div className=\"flex flex-wrap gap-2 justify-center\" data-testid=\"suggested-actions\">\n              {suggestedQuestions.map((question, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setInputValue(question);\n                    handleSendMessage();\n                  }}\n                  className=\"bg-slate-800 border-amber-400/30 text-amber-400 hover:bg-amber-400 hover:text-slate-900 transition-colors\"\n                  data-testid={`button-suggestion-${index}`}\n                >\n                  {question}\n                </Button>\n              ))}\n            </div>\n          )}\n\n          <div ref={messagesEndRef} />\n        </div>\n      </div>\n\n      {/* Chat Input */}\n      <div className=\"bg-slate-800/90 backdrop-blur-sm border-t border-amber-400/30 p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-1 relative\">\n              <Input\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                placeholder=\"Ask Jarvis about inventory, reports, or analytics...\"\n                className=\"w-full bg-slate-900 border-amber-400/30 rounded-xl px-4 py-3 text-white placeholder-gray-400 focus:ring-2 focus:ring-amber-400\"\n                data-testid=\"input-chat-message\"\n              />\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-amber-400 hover:text-amber-300\"\n              >\n                <Mic className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            <Button\n              onClick={handleSendMessage}\n              disabled={!inputValue.trim()}\n              className=\"bg-gradient-to-r from-amber-400 to-amber-500 text-slate-900 px-6 py-3 rounded-xl font-medium hover:opacity-90 transition-opacity\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"w-4 h-4 mr-2\" />\n              Send\n            </Button>\n          </div>\n          <div className=\"flex items-center justify-center mt-3 text-xs text-gray-400\">\n            <ShieldCheck className=\"w-3 h-3 mr-1\" />\n            Secured with cross-app authentication\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20049},"client/src/pages/jarvis/JarvisApp.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { authService, type AuthState } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport AuthGuard from \"@/components/AuthGuard\";\nimport ChatInterface from \"./ChatInterface\";\nimport TokenSidebar from \"@/components/TokenSidebar\";\nimport { Key, User, Home } from \"lucide-react\";\n\nexport default function JarvisApp() {\n  const [authState, setAuthState] = useState<AuthState>(authService.getState());\n  const [isTokenSidebarOpen, setIsTokenSidebarOpen] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = authService.subscribe(setAuthState);\n    return unsubscribe;\n  }, []);\n\n  const handleLogout = async () => {\n    await authService.logout();\n  };\n\n  const getUserInitials = () => {\n    if (!authState.user) return \"U\";\n    return `${authState.user.firstName[0]}${authState.user.lastName[0]}`;\n  };\n\n  return (\n    <AuthGuard\n      application=\"jarvis\"\n      title=\"J.A.R.V.I.S\"\n      description=\"Just A Rather Very Intelligent System\"\n      icon=\"fas fa-robot\"\n      theme=\"jarvis\"\n    >\n      <div className=\"h-full bg-gradient-to-br from-blue-900 via-blue-800 to-blue-900 relative overflow-hidden\">\n        {/* Enhanced spinning animation with radial lines */}\n        <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none overflow-hidden\">\n          {/* Outer ring with radial lines */}\n          <div className=\"relative w-96 h-96\">\n            <div className=\"absolute inset-0 animate-spin\" style={{ animationDuration: '8s' }}>\n              {Array.from({ length: 24 }).map((_, i) => (\n                <div\n                  key={i}\n                  className=\"absolute w-1 bg-blue-400/30\"\n                  style={{\n                    height: '48px',\n                    left: '50%',\n                    top: '0',\n                    transformOrigin: '50% 192px',\n                    transform: `translateX(-50%) rotate(${i * 15}deg)`,\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n          \n          {/* Middle ring with shorter lines */}\n          <div className=\"absolute relative w-64 h-64\">\n            <div className=\"absolute inset-0 animate-spin\" style={{ animationDuration: '6s', animationDirection: 'reverse' }}>\n              {Array.from({ length: 16 }).map((_, i) => (\n                <div\n                  key={i}\n                  className=\"absolute w-1 bg-blue-300/40\"\n                  style={{\n                    height: '32px',\n                    left: '50%',\n                    top: '0',\n                    transformOrigin: '50% 128px',\n                    transform: `translateX(-50%) rotate(${i * 22.5}deg)`,\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n          \n          {/* Inner ring with dots */}\n          <div className=\"absolute relative w-32 h-32\">\n            <div className=\"absolute inset-0 animate-spin\" style={{ animationDuration: '4s' }}>\n              {Array.from({ length: 8 }).map((_, i) => (\n                <div\n                  key={i}\n                  className=\"absolute w-2 h-2 bg-blue-200/60 rounded-full\"\n                  style={{\n                    left: '50%',\n                    top: '0',\n                    transformOrigin: '50% 64px',\n                    transform: `translateX(-50%) rotate(${i * 45}deg)`,\n                  }}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n        {/* Navigation Header */}\n        <nav className=\"bg-blue-800/90 backdrop-blur-sm shadow-xl border-b border-blue-400/30 sticky top-0 z-30\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between items-center h-16\">\n              <div className=\"flex items-center space-x-8\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-blue-400 to-blue-500 rounded-full flex items-center justify-center mr-3\">\n                    <span className=\"text-white text-sm font-bold\">J</span>\n                  </div>\n                  <h1 className=\"text-xl font-bold text-white\" data-testid=\"text-app-title\">\n                    J.A.R.V.I.S\n                  </h1>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => window.location.href = '/'}\n                  className=\"text-blue-400 hover:text-blue-300\"\n                  data-testid=\"button-home\"\n                >\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  <span className=\"hidden sm:inline\">Home</span>\n                </Button>\n              </div>\n              <div className=\"flex items-center space-x-4\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsTokenSidebarOpen(true)}\n                  className=\"text-blue-400 hover:text-blue-300\"\n                  data-testid=\"button-toggle-tokens\"\n                >\n                  <Key className=\"w-4 h-4 mr-2\" />\n                  <span className=\"hidden sm:inline\">Tokens</span>\n                </Button>\n                {authState.user && (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white text-sm font-medium\" data-testid=\"text-user-initials\">\n                        {getUserInitials()}\n                      </span>\n                    </div>\n                    <span className=\"text-sm text-white\" data-testid=\"text-user-name\">\n                      {authState.user.firstName} {authState.user.lastName}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleLogout}\n                      className=\"text-blue-400 hover:text-blue-300\"\n                      data-testid=\"button-logout\"\n                    >\n                      Logout\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </nav>\n        \n        <div className=\"h-[calc(100vh-4rem)]\">\n          <ChatInterface />\n        </div>\n        \n        {/* Token Sidebar */}\n        <TokenSidebar \n          isOpen={isTokenSidebarOpen} \n          onClose={() => setIsTokenSidebarOpen(false)} \n        />\n      </div>\n    </AuthGuard>\n  );\n}\n","size_bytes":6599},"shared/types.ts":{"content":"import { z } from \"zod\";\n\n// Base interfaces for all data types\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  oktaUserId?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Warehouse {\n  id: string;\n  name: string;\n  location: string;\n  state: string;\n  active: boolean;\n  createdAt: Date;\n}\n\nexport interface InventoryItem {\n  id: string;\n  warehouseId: string;\n  name: string;\n  sku: string;\n  category: string;\n  quantity: number;\n  minStockLevel: number;\n  price?: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface AuthSession {\n  id: string;\n  userId: string;\n  sessionId: string;\n  idToken: string;\n  accessToken?: string;\n  refreshToken?: string;\n  expiresAt: Date;\n  application: string; // 'inventory' or 'jarvis'\n  createdAt: Date;\n}\n\nexport interface TokenExchangeLog {\n  id: string;\n  userId: string;\n  fromApp: string;\n  toApp: string;\n  jagToken: string;\n  success: boolean;\n  errorMessage?: string;\n  createdAt: Date;\n}\n\n// Insert schemas for validation\nexport const insertUserSchema = z.object({\n  username: z.string().min(1),\n  email: z.string().email(),\n  firstName: z.string().min(1),\n  lastName: z.string().min(1),\n  oktaUserId: z.string().optional(),\n});\n\nexport const insertWarehouseSchema = z.object({\n  name: z.string().min(1),\n  location: z.string().min(1),\n  state: z.string().min(1),\n  active: z.boolean().default(true),\n});\n\nexport const insertInventoryItemSchema = z.object({\n  warehouseId: z.string(),\n  name: z.string().min(1),\n  sku: z.string().min(1),\n  category: z.string().min(1),\n  quantity: z.number().int().min(0),\n  minStockLevel: z.number().int().min(0).default(50),\n  price: z.number().positive().optional(),\n});\n\nexport const insertAuthSessionSchema = z.object({\n  userId: z.string(),\n  sessionId: z.string(),\n  idToken: z.string(),\n  accessToken: z.string().optional(),\n  refreshToken: z.string().optional(),\n  expiresAt: z.date(),\n  application: z.enum(['inventory', 'jarvis']),\n});\n\nexport const insertTokenExchangeLogSchema = z.object({\n  userId: z.string(),\n  fromApp: z.string(),\n  toApp: z.string(),\n  jagToken: z.string(),\n  success: z.boolean(),\n  errorMessage: z.string().optional(),\n});\n\n// Insert types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertWarehouse = z.infer<typeof insertWarehouseSchema>;\nexport type InsertInventoryItem = z.infer<typeof insertInventoryItemSchema>;\nexport type InsertAuthSession = z.infer<typeof insertAuthSessionSchema>;\nexport type InsertTokenExchangeLog = z.infer<typeof insertTokenExchangeLogSchema>;","size_bytes":2621}},"version":1}